{"version":3,"file":"particle.min.js","mappings":"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","sources":["webpack://particle-api-js/webpack/universalModuleDefinition","webpack://particle-api-js/./node_modules/stream-http/index.js","webpack://particle-api-js/./node_modules/stream-http/lib/capability.js","webpack://particle-api-js/./node_modules/stream-http/lib/request.js","webpack://particle-api-js/./node_modules/stream-http/lib/response.js","webpack://particle-api-js/./src/Agent.js","webpack://particle-api-js/./src/Client.js","webpack://particle-api-js/./src/Defaults.js","webpack://particle-api-js/./src/EventStream.js","webpack://particle-api-js/./src/Library.js","webpack://particle-api-js/./src/Particle.js","webpack://particle-api-js/external commonjs \"buffer\"","webpack://particle-api-js/external commonjs \"builtin-status-codes\"","webpack://particle-api-js/external commonjs \"events\"","webpack://particle-api-js/external commonjs \"form-data\"","webpack://particle-api-js/external commonjs \"inherits\"","webpack://particle-api-js/external commonjs \"node-fetch\"","webpack://particle-api-js/external commonjs \"qs\"","webpack://particle-api-js/external commonjs \"readable-stream\"","webpack://particle-api-js/external commonjs \"url\"","webpack://particle-api-js/external commonjs \"xtend\"","webpack://particle-api-js/webpack/bootstrap","webpack://particle-api-js/webpack/runtime/global","webpack://particle-api-js/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"particle-api-js\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"particle-api-js\"] = factory();\n\telse\n\t\troot[\"particle-api-js\"] = factory();\n})(this, () => {\nreturn ","var ClientRequest = require('./lib/request')\nvar response = require('./lib/response')\nvar extend = require('xtend')\nvar statusCodes = require('builtin-status-codes')\nvar url = require('url')\n\nvar http = exports\n\nhttp.request = function (opts, cb) {\n\tif (typeof opts === 'string')\n\t\topts = url.parse(opts)\n\telse\n\t\topts = extend(opts)\n\n\t// Normally, the page is loaded from http or https, so not specifying a protocol\n\t// will result in a (valid) protocol-relative url. However, this won't work if\n\t// the protocol is something else, like 'file:'\n\tvar defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''\n\n\tvar protocol = opts.protocol || defaultProtocol\n\tvar host = opts.hostname || opts.host\n\tvar port = opts.port\n\tvar path = opts.path || '/'\n\n\t// Necessary for IPv6 addresses\n\tif (host && host.indexOf(':') !== -1)\n\t\thost = '[' + host + ']'\n\n\t// This may be a relative url. The browser should always be able to interpret it correctly.\n\topts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path\n\topts.method = (opts.method || 'GET').toUpperCase()\n\topts.headers = opts.headers || {}\n\n\t// Also valid opts.auth, opts.mode\n\n\tvar req = new ClientRequest(opts)\n\tif (cb)\n\t\treq.on('response', cb)\n\treturn req\n}\n\nhttp.get = function get (opts, cb) {\n\tvar req = http.request(opts, cb)\n\treq.end()\n\treturn req\n}\n\nhttp.ClientRequest = ClientRequest\nhttp.IncomingMessage = response.IncomingMessage\n\nhttp.Agent = function () {}\nhttp.Agent.defaultMaxSockets = 4\n\nhttp.globalAgent = new http.Agent()\n\nhttp.STATUS_CODES = statusCodes\n\nhttp.METHODS = [\n\t'CHECKOUT',\n\t'CONNECT',\n\t'COPY',\n\t'DELETE',\n\t'GET',\n\t'HEAD',\n\t'LOCK',\n\t'M-SEARCH',\n\t'MERGE',\n\t'MKACTIVITY',\n\t'MKCOL',\n\t'MOVE',\n\t'NOTIFY',\n\t'OPTIONS',\n\t'PATCH',\n\t'POST',\n\t'PROPFIND',\n\t'PROPPATCH',\n\t'PURGE',\n\t'PUT',\n\t'REPORT',\n\t'SEARCH',\n\t'SUBSCRIBE',\n\t'TRACE',\n\t'UNLOCK',\n\t'UNSUBSCRIBE'\n]","exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)\n\nexports.writableStream = isFunction(global.WritableStream)\n\nexports.abortController = isFunction(global.AbortController)\n\n// The xhr request to example.com may violate some restrictive CSP configurations,\n// so if we're running in a browser that supports `fetch`, avoid calling getXHR()\n// and assume support for certain features below.\nvar xhr\nfunction getXHR () {\n\t// Cache the xhr value\n\tif (xhr !== undefined) return xhr\n\n\tif (global.XMLHttpRequest) {\n\t\txhr = new global.XMLHttpRequest()\n\t\t// If XDomainRequest is available (ie only, where xhr might not work\n\t\t// cross domain), use the page location. Otherwise use example.com\n\t\t// Note: this doesn't actually make an http request.\n\t\ttry {\n\t\t\txhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')\n\t\t} catch(e) {\n\t\t\txhr = null\n\t\t}\n\t} else {\n\t\t// Service workers don't have XHR\n\t\txhr = null\n\t}\n\treturn xhr\n}\n\nfunction checkTypeSupport (type) {\n\tvar xhr = getXHR()\n\tif (!xhr) return false\n\ttry {\n\t\txhr.responseType = type\n\t\treturn xhr.responseType === type\n\t} catch (e) {}\n\treturn false\n}\n\n// If fetch is supported, then arraybuffer will be supported too. Skip calling\n// checkTypeSupport(), since that calls getXHR().\nexports.arraybuffer = exports.fetch || checkTypeSupport('arraybuffer')\n\n// These next two tests unavoidably show warnings in Chrome. Since fetch will always\n// be used if it's available, just return false for these to avoid the warnings.\nexports.msstream = !exports.fetch && checkTypeSupport('ms-stream')\nexports.mozchunkedarraybuffer = !exports.fetch && checkTypeSupport('moz-chunked-arraybuffer')\n\n// If fetch is supported, then overrideMimeType will be supported too. Skip calling\n// getXHR().\nexports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)\n\nfunction isFunction (value) {\n\treturn typeof value === 'function'\n}\n\nxhr = null // Help gc\n","var capability = require('./capability')\nvar inherits = require('inherits')\nvar response = require('./response')\nvar stream = require('readable-stream')\n\nvar IncomingMessage = response.IncomingMessage\nvar rStates = response.readyStates\n\nfunction decideMode (preferBinary, useFetch) {\n\tif (capability.fetch && useFetch) {\n\t\treturn 'fetch'\n\t} else if (capability.mozchunkedarraybuffer) {\n\t\treturn 'moz-chunked-arraybuffer'\n\t} else if (capability.msstream) {\n\t\treturn 'ms-stream'\n\t} else if (capability.arraybuffer && preferBinary) {\n\t\treturn 'arraybuffer'\n\t} else {\n\t\treturn 'text'\n\t}\n}\n\nvar ClientRequest = module.exports = function (opts) {\n\tvar self = this\n\tstream.Writable.call(self)\n\n\tself._opts = opts\n\tself._body = []\n\tself._headers = {}\n\tif (opts.auth)\n\t\tself.setHeader('Authorization', 'Basic ' + Buffer.from(opts.auth).toString('base64'))\n\tObject.keys(opts.headers).forEach(function (name) {\n\t\tself.setHeader(name, opts.headers[name])\n\t})\n\n\tvar preferBinary\n\tvar useFetch = true\n\tif (opts.mode === 'disable-fetch' || ('requestTimeout' in opts && !capability.abortController)) {\n\t\t// If the use of XHR should be preferred. Not typically needed.\n\t\tuseFetch = false\n\t\tpreferBinary = true\n\t} else if (opts.mode === 'prefer-streaming') {\n\t\t// If streaming is a high priority but binary compatibility and\n\t\t// the accuracy of the 'content-type' header aren't\n\t\tpreferBinary = false\n\t} else if (opts.mode === 'allow-wrong-content-type') {\n\t\t// If streaming is more important than preserving the 'content-type' header\n\t\tpreferBinary = !capability.overrideMimeType\n\t} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {\n\t\t// Use binary if text streaming may corrupt data or the content-type header, or for speed\n\t\tpreferBinary = true\n\t} else {\n\t\tthrow new Error('Invalid value for opts.mode')\n\t}\n\tself._mode = decideMode(preferBinary, useFetch)\n\tself._fetchTimer = null\n\tself._socketTimeout = null\n\tself._socketTimer = null\n\n\tself.on('finish', function () {\n\t\tself._onFinish()\n\t})\n}\n\ninherits(ClientRequest, stream.Writable)\n\nClientRequest.prototype.setHeader = function (name, value) {\n\tvar self = this\n\tvar lowerName = name.toLowerCase()\n\t// This check is not necessary, but it prevents warnings from browsers about setting unsafe\n\t// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but\n\t// http-browserify did it, so I will too.\n\tif (unsafeHeaders.indexOf(lowerName) !== -1)\n\t\treturn\n\n\tself._headers[lowerName] = {\n\t\tname: name,\n\t\tvalue: value\n\t}\n}\n\nClientRequest.prototype.getHeader = function (name) {\n\tvar header = this._headers[name.toLowerCase()]\n\tif (header)\n\t\treturn header.value\n\treturn null\n}\n\nClientRequest.prototype.removeHeader = function (name) {\n\tvar self = this\n\tdelete self._headers[name.toLowerCase()]\n}\n\nClientRequest.prototype._onFinish = function () {\n\tvar self = this\n\n\tif (self._destroyed)\n\t\treturn\n\tvar opts = self._opts\n\n\tif ('timeout' in opts && opts.timeout !== 0) {\n\t\tself.setTimeout(opts.timeout)\n\t}\n\n\tvar headersObj = self._headers\n\tvar body = null\n\tif (opts.method !== 'GET' && opts.method !== 'HEAD') {\n        body = new Blob(self._body, {\n            type: (headersObj['content-type'] || {}).value || ''\n        });\n    }\n\n\t// create flattened list of headers\n\tvar headersList = []\n\tObject.keys(headersObj).forEach(function (keyName) {\n\t\tvar name = headersObj[keyName].name\n\t\tvar value = headersObj[keyName].value\n\t\tif (Array.isArray(value)) {\n\t\t\tvalue.forEach(function (v) {\n\t\t\t\theadersList.push([name, v])\n\t\t\t})\n\t\t} else {\n\t\t\theadersList.push([name, value])\n\t\t}\n\t})\n\n\tif (self._mode === 'fetch') {\n\t\tvar signal = null\n\t\tif (capability.abortController) {\n\t\t\tvar controller = new AbortController()\n\t\t\tsignal = controller.signal\n\t\t\tself._fetchAbortController = controller\n\n\t\t\tif ('requestTimeout' in opts && opts.requestTimeout !== 0) {\n\t\t\t\tself._fetchTimer = global.setTimeout(function () {\n\t\t\t\t\tself.emit('requestTimeout')\n\t\t\t\t\tif (self._fetchAbortController)\n\t\t\t\t\t\tself._fetchAbortController.abort()\n\t\t\t\t}, opts.requestTimeout)\n\t\t\t}\n\t\t}\n\n\t\tglobal.fetch(self._opts.url, {\n\t\t\tmethod: self._opts.method,\n\t\t\theaders: headersList,\n\t\t\tbody: body || undefined,\n\t\t\tmode: 'cors',\n\t\t\tcredentials: opts.withCredentials ? 'include' : 'same-origin',\n\t\t\tsignal: signal\n\t\t}).then(function (response) {\n\t\t\tself._fetchResponse = response\n\t\t\tself._resetTimers(false)\n\t\t\tself._connect()\n\t\t}, function (reason) {\n\t\t\tself._resetTimers(true)\n\t\t\tif (!self._destroyed)\n\t\t\t\tself.emit('error', reason)\n\t\t})\n\t} else {\n\t\tvar xhr = self._xhr = new global.XMLHttpRequest()\n\t\ttry {\n\t\t\txhr.open(self._opts.method, self._opts.url, true)\n\t\t} catch (err) {\n\t\t\tprocess.nextTick(function () {\n\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\t// Can't set responseType on really old browsers\n\t\tif ('responseType' in xhr)\n\t\t\txhr.responseType = self._mode\n\n\t\tif ('withCredentials' in xhr)\n\t\t\txhr.withCredentials = !!opts.withCredentials\n\n\t\tif (self._mode === 'text' && 'overrideMimeType' in xhr)\n\t\t\txhr.overrideMimeType('text/plain; charset=x-user-defined')\n\n\t\tif ('requestTimeout' in opts) {\n\t\t\txhr.timeout = opts.requestTimeout\n\t\t\txhr.ontimeout = function () {\n\t\t\t\tself.emit('requestTimeout')\n\t\t\t}\n\t\t}\n\n\t\theadersList.forEach(function (header) {\n\t\t\txhr.setRequestHeader(header[0], header[1])\n\t\t})\n\n\t\tself._response = null\n\t\txhr.onreadystatechange = function () {\n\t\t\tswitch (xhr.readyState) {\n\t\t\t\tcase rStates.LOADING:\n\t\t\t\tcase rStates.DONE:\n\t\t\t\t\tself._onXHRProgress()\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// Necessary for streaming in Firefox, since xhr.response is ONLY defined\n\t\t// in onprogress, not in onreadystatechange with xhr.readyState = 3\n\t\tif (self._mode === 'moz-chunked-arraybuffer') {\n\t\t\txhr.onprogress = function () {\n\t\t\t\tself._onXHRProgress()\n\t\t\t}\n\t\t}\n\n\t\txhr.onerror = function () {\n\t\t\tif (self._destroyed)\n\t\t\t\treturn\n\t\t\tself._resetTimers(true)\n\t\t\tself.emit('error', new Error('XHR error'))\n\t\t}\n\n\t\ttry {\n\t\t\txhr.send(body)\n\t\t} catch (err) {\n\t\t\tprocess.nextTick(function () {\n\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t}\n}\n\n/**\n * Checks if xhr.status is readable and non-zero, indicating no error.\n * Even though the spec says it should be available in readyState 3,\n * accessing it throws an exception in IE8\n */\nfunction statusValid (xhr) {\n\ttry {\n\t\tvar status = xhr.status\n\t\treturn (status !== null && status !== 0)\n\t} catch (e) {\n\t\treturn false\n\t}\n}\n\nClientRequest.prototype._onXHRProgress = function () {\n\tvar self = this\n\n\tself._resetTimers(false)\n\n\tif (!statusValid(self._xhr) || self._destroyed)\n\t\treturn\n\n\tif (!self._response)\n\t\tself._connect()\n\n\tself._response._onXHRProgress(self._resetTimers.bind(self))\n}\n\nClientRequest.prototype._connect = function () {\n\tvar self = this\n\n\tif (self._destroyed)\n\t\treturn\n\n\tself._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._resetTimers.bind(self))\n\tself._response.on('error', function(err) {\n\t\tself.emit('error', err)\n\t})\n\n\tself.emit('response', self._response)\n}\n\nClientRequest.prototype._write = function (chunk, encoding, cb) {\n\tvar self = this\n\n\tself._body.push(chunk)\n\tcb()\n}\n\nClientRequest.prototype._resetTimers = function (done) {\n\tvar self = this\n\n\tglobal.clearTimeout(self._socketTimer)\n\tself._socketTimer = null\n\n\tif (done) {\n\t\tglobal.clearTimeout(self._fetchTimer)\n\t\tself._fetchTimer = null\n\t} else if (self._socketTimeout) {\n\t\tself._socketTimer = global.setTimeout(function () {\n\t\t\tself.emit('timeout')\n\t\t}, self._socketTimeout)\n\t}\n}\n\nClientRequest.prototype.abort = ClientRequest.prototype.destroy = function (err) {\n\tvar self = this\n\tself._destroyed = true\n\tself._resetTimers(true)\n\tif (self._response)\n\t\tself._response._destroyed = true\n\tif (self._xhr)\n\t\tself._xhr.abort()\n\telse if (self._fetchAbortController)\n\t\tself._fetchAbortController.abort()\n\n\tif (err)\n\t\tself.emit('error', err)\n}\n\nClientRequest.prototype.end = function (data, encoding, cb) {\n\tvar self = this\n\tif (typeof data === 'function') {\n\t\tcb = data\n\t\tdata = undefined\n\t}\n\n\tstream.Writable.prototype.end.call(self, data, encoding, cb)\n}\n\nClientRequest.prototype.setTimeout = function (timeout, cb) {\n\tvar self = this\n\n\tif (cb)\n\t\tself.once('timeout', cb)\n\n\tself._socketTimeout = timeout\n\tself._resetTimers(false)\n}\n\nClientRequest.prototype.flushHeaders = function () {}\nClientRequest.prototype.setNoDelay = function () {}\nClientRequest.prototype.setSocketKeepAlive = function () {}\n\n// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\nvar unsafeHeaders = [\n\t'accept-charset',\n\t'accept-encoding',\n\t'access-control-request-headers',\n\t'access-control-request-method',\n\t'connection',\n\t'content-length',\n\t'cookie',\n\t'cookie2',\n\t'date',\n\t'dnt',\n\t'expect',\n\t'host',\n\t'keep-alive',\n\t'origin',\n\t'referer',\n\t'te',\n\t'trailer',\n\t'transfer-encoding',\n\t'upgrade',\n\t'via'\n]\n","var capability = require('./capability')\nvar inherits = require('inherits')\nvar stream = require('readable-stream')\n\nvar rStates = exports.readyStates = {\n\tUNSENT: 0,\n\tOPENED: 1,\n\tHEADERS_RECEIVED: 2,\n\tLOADING: 3,\n\tDONE: 4\n}\n\nvar IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, resetTimers) {\n\tvar self = this\n\tstream.Readable.call(self)\n\n\tself._mode = mode\n\tself.headers = {}\n\tself.rawHeaders = []\n\tself.trailers = {}\n\tself.rawTrailers = []\n\n\t// Fake the 'close' event, but only once 'end' fires\n\tself.on('end', function () {\n\t\t// The nextTick is necessary to prevent the 'request' module from causing an infinite loop\n\t\tprocess.nextTick(function () {\n\t\t\tself.emit('close')\n\t\t})\n\t})\n\n\tif (mode === 'fetch') {\n\t\tself._fetchResponse = response\n\n\t\tself.url = response.url\n\t\tself.statusCode = response.status\n\t\tself.statusMessage = response.statusText\n\t\t\n\t\tresponse.headers.forEach(function (header, key){\n\t\t\tself.headers[key.toLowerCase()] = header\n\t\t\tself.rawHeaders.push(key, header)\n\t\t})\n\n\t\tif (capability.writableStream) {\n\t\t\tvar writable = new WritableStream({\n\t\t\t\twrite: function (chunk) {\n\t\t\t\t\tresetTimers(false)\n\t\t\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\t\t\tif (self._destroyed) {\n\t\t\t\t\t\t\treject()\n\t\t\t\t\t\t} else if(self.push(Buffer.from(chunk))) {\n\t\t\t\t\t\t\tresolve()\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself._resumeFetch = resolve\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t\tclose: function () {\n\t\t\t\t\tresetTimers(true)\n\t\t\t\t\tif (!self._destroyed)\n\t\t\t\t\t\tself.push(null)\n\t\t\t\t},\n\t\t\t\tabort: function (err) {\n\t\t\t\t\tresetTimers(true)\n\t\t\t\t\tif (!self._destroyed)\n\t\t\t\t\t\tself.emit('error', err)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\ttry {\n\t\t\t\tresponse.body.pipeTo(writable).catch(function (err) {\n\t\t\t\t\tresetTimers(true)\n\t\t\t\t\tif (!self._destroyed)\n\t\t\t\t\t\tself.emit('error', err)\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t} catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this\n\t\t}\n\t\t// fallback for when writableStream or pipeTo aren't available\n\t\tvar reader = response.body.getReader()\n\t\tfunction read () {\n\t\t\treader.read().then(function (result) {\n\t\t\t\tif (self._destroyed)\n\t\t\t\t\treturn\n\t\t\t\tresetTimers(result.done)\n\t\t\t\tif (result.done) {\n\t\t\t\t\tself.push(null)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tself.push(Buffer.from(result.value))\n\t\t\t\tread()\n\t\t\t}).catch(function (err) {\n\t\t\t\tresetTimers(true)\n\t\t\t\tif (!self._destroyed)\n\t\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t}\n\t\tread()\n\t} else {\n\t\tself._xhr = xhr\n\t\tself._pos = 0\n\n\t\tself.url = xhr.responseURL\n\t\tself.statusCode = xhr.status\n\t\tself.statusMessage = xhr.statusText\n\t\tvar headers = xhr.getAllResponseHeaders().split(/\\r?\\n/)\n\t\theaders.forEach(function (header) {\n\t\t\tvar matches = header.match(/^([^:]+):\\s*(.*)/)\n\t\t\tif (matches) {\n\t\t\t\tvar key = matches[1].toLowerCase()\n\t\t\t\tif (key === 'set-cookie') {\n\t\t\t\t\tif (self.headers[key] === undefined) {\n\t\t\t\t\t\tself.headers[key] = []\n\t\t\t\t\t}\n\t\t\t\t\tself.headers[key].push(matches[2])\n\t\t\t\t} else if (self.headers[key] !== undefined) {\n\t\t\t\t\tself.headers[key] += ', ' + matches[2]\n\t\t\t\t} else {\n\t\t\t\t\tself.headers[key] = matches[2]\n\t\t\t\t}\n\t\t\t\tself.rawHeaders.push(matches[1], matches[2])\n\t\t\t}\n\t\t})\n\n\t\tself._charset = 'x-user-defined'\n\t\tif (!capability.overrideMimeType) {\n\t\t\tvar mimeType = self.rawHeaders['mime-type']\n\t\t\tif (mimeType) {\n\t\t\t\tvar charsetMatch = mimeType.match(/;\\s*charset=([^;])(;|$)/)\n\t\t\t\tif (charsetMatch) {\n\t\t\t\t\tself._charset = charsetMatch[1].toLowerCase()\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!self._charset)\n\t\t\t\tself._charset = 'utf-8' // best guess\n\t\t}\n\t}\n}\n\ninherits(IncomingMessage, stream.Readable)\n\nIncomingMessage.prototype._read = function () {\n\tvar self = this\n\n\tvar resolve = self._resumeFetch\n\tif (resolve) {\n\t\tself._resumeFetch = null\n\t\tresolve()\n\t}\n}\n\nIncomingMessage.prototype._onXHRProgress = function (resetTimers) {\n\tvar self = this\n\n\tvar xhr = self._xhr\n\n\tvar response = null\n\tswitch (self._mode) {\n\t\tcase 'text':\n\t\t\tresponse = xhr.responseText\n\t\t\tif (response.length > self._pos) {\n\t\t\t\tvar newData = response.substr(self._pos)\n\t\t\t\tif (self._charset === 'x-user-defined') {\n\t\t\t\t\tvar buffer = Buffer.alloc(newData.length)\n\t\t\t\t\tfor (var i = 0; i < newData.length; i++)\n\t\t\t\t\t\tbuffer[i] = newData.charCodeAt(i) & 0xff\n\n\t\t\t\t\tself.push(buffer)\n\t\t\t\t} else {\n\t\t\t\t\tself.push(newData, self._charset)\n\t\t\t\t}\n\t\t\t\tself._pos = response.length\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'arraybuffer':\n\t\t\tif (xhr.readyState !== rStates.DONE || !xhr.response)\n\t\t\t\tbreak\n\t\t\tresponse = xhr.response\n\t\t\tself.push(Buffer.from(new Uint8Array(response)))\n\t\t\tbreak\n\t\tcase 'moz-chunked-arraybuffer': // take whole\n\t\t\tresponse = xhr.response\n\t\t\tif (xhr.readyState !== rStates.LOADING || !response)\n\t\t\t\tbreak\n\t\t\tself.push(Buffer.from(new Uint8Array(response)))\n\t\t\tbreak\n\t\tcase 'ms-stream':\n\t\t\tresponse = xhr.response\n\t\t\tif (xhr.readyState !== rStates.LOADING)\n\t\t\t\tbreak\n\t\t\tvar reader = new global.MSStreamReader()\n\t\t\treader.onprogress = function () {\n\t\t\t\tif (reader.result.byteLength > self._pos) {\n\t\t\t\t\tself.push(Buffer.from(new Uint8Array(reader.result.slice(self._pos))))\n\t\t\t\t\tself._pos = reader.result.byteLength\n\t\t\t\t}\n\t\t\t}\n\t\t\treader.onload = function () {\n\t\t\t\tresetTimers(true)\n\t\t\t\tself.push(null)\n\t\t\t}\n\t\t\t// reader.onerror = ??? // TODO: this\n\t\t\treader.readAsArrayBuffer(response)\n\t\t\tbreak\n\t}\n\n\t// The ms-stream case handles end separately in reader.onload()\n\tif (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {\n\t\tresetTimers(true)\n\t\tself.push(null)\n\t}\n}\n","/*\n ******************************************************************************\n Copyright (c) 2016 Particle Industries, Inc.  All rights reserved.\n\n This program is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation, either\n version 3 of the License, or (at your option) any later version.\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this program; if not, see <http://www.gnu.org/licenses/>.\n ******************************************************************************\n */\n\nconst fetch = require('node-fetch');\nconst FormData = require('form-data');\nconst qs = require('qs');\nconst fs = require('../fs');\nconst packageJson = require('../package.json');\n\n/**\n * The object returned for a basic request\n * @typedef {object} JSONResponse\n * @property {number} statusCode\tThe HTTP response status\n * @property {object} body\t\tThe endpoint's response parsed as a JSON\n */\n\n/**\n * The possible response from an API request\n * @typedef {JSONResponse|Buffer|ArrayBuffer} RequestResponse\tThe type is based on\n * the request config and whether is on browser or node\n */\n\n/**\n * The error object generated in case of a failed request\n * @typedef {object} RequestError\n * @property {number} statusCode\tThe HTTP response status\n * @property {string} errorDescription\tDetails on what caused the failed request\n * @property {string} shortErrorDescription\tSummarized version of the fail reason\n * @property {object} body\t\tThe response object from the request\n * @property {object} error\t\tThe error object from the request\n */\n\nclass Agent {\n\tconstructor(baseUrl){\n\t\tthis.setBaseUrl(baseUrl);\n\t}\n\n\tsetBaseUrl(baseUrl) {\n\t\tthis.baseUrl = baseUrl;\n\t}\n\n\t/**\n\t * Make a GET request\n\t * @param {object} params\t\tConfigurations to customize the request\n\t * @param {string} params.uri\t\tThe URI to request\n\t * @param {string|object} [params.auth]\tAuthorization token to use\n\t * @param {object} [params.headers]\tKey/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {string|object} [params.query] Key/Value pairs of query params or a correctly formatted string\n\t * @param {object} [params.context]\tThe invocation context, describing the tool and project\n\t * @returns {Promise<RequestResponse, RequestError>} A promise that resolves with either the requested data or an error object\n\t */\n\tget({ uri, auth, headers, query, context }) {\n\t\treturn this.request({ uri, method: 'get', auth, headers, query, context });\n\t}\n\n\t/**\n\t * Make a HEAD request\n\t * @param {object} params\t\tConfigurations to customize the request\n\t * @param {string} params.uri\t\tThe URI to request\n\t * @param {string|object} [params.auth]\tAuthorization token to use\n\t * @param {object} [params.headers]\tKey/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {string|object} [params.query] Key/Value pairs of query params or a correctly formatted string\n\t * @param {object} [params.context]\tThe invocation context, describing the tool and project\n\t * @returns {Promise<RequestResponse, RequestError>} A promise that resolves with either the requested data or an error object\n\t */\n\thead({ uri, auth, headers, query, context }) {\n\t\treturn this.request({ uri, method: 'head', auth, headers, query, context });\n\t}\n\n\t/**\n\t * Make a POST request\n\t * @param {object} params\t\tConfigurations to customize the request\n\t * @param {string} params.uri\t\tThe URI to request\n\t * @param {string|object} [params.auth]\tAuthorization token to use\n\t * @param {object} [params.headers]\tKey/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {object} [params.data]\tKey/Value pairs of query params or a correctly formatted string\n\t * @param {object} [params.context]\tThe invocation context, describing the tool and project\n\t * @returns {Promise<RequestResponse, RequestError>} A promise that resolves with either the requested data or an error object\n\t */\n\tpost({ uri, headers, data, auth, context }) {\n\t\treturn this.request({ uri, method: 'post', auth, headers, data, context });\n\t}\n\n\t/**\n\t * Make a PUT request\n\t * @param {object} params\t\tConfigurations to customize the request\n\t * @param {string} params.uri\t\tThe URI to request\n\t * @param {string|object} [params.auth]\tAuthorization token to use\n\t * @param {object} [params.headers]\tKey/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {object} [params.data]\tKey/VAlue pairs of query params or a correctly formatted string\n\t * @param {object} [params.context]\tThe invocation context, describing the tool and project\n\t * @returns {Promise<RequestResponse, RequestError>} A promise that resolves with either the requested data or an error object\n\t */\n\tput({ uri, auth, headers, data, context }) {\n\t\treturn this.request({ uri, method: 'put', auth, headers, data, context });\n\t}\n\n\t/**\n\t * Make a DELETE request\n\t * @param {object} params\t\tConfigurations to customize the request\n\t * @param {string} params.uri\t\tThe URI to request\n\t * @param {string|object} [params.auth]\tAuthorization token to use\n\t * @param {object} [params.headers]\tKey/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {object} [params.data]\tKey/Value pairs of query params or a correctly formatted string\n\t * @param {object} [params.context]\tThe invocation context, describing the tool and project\n\t * @returns {Promise<RequestResponse, RequestError>} A promise that resolves with either the requested data or an error object\n\t */\n\tdelete({ uri, auth, headers, data, context }) {\n\t\treturn this.request({ uri, method: 'delete', auth, headers, data, context });\n\t}\n\n\t/**\n\t *\n\t * @param {object} config\t\t\tAn obj with all the possible request configurations\n\t * @param {string} config.uri\t\t\tThe URI to request\n\t * @param {string} config.method        \tThe method used to request the URI, should be in uppercase.\n\t * @param {object} [config.headers]\t\tKey/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {object} [config.data]\t\tArbitrary data to send as the body.\n\t * @param {string|object} [config.auth]         Authorization\n\t * @param {string|object} [config.query]\tQuery parameters\n\t * @param {object} [config.form]\t\tForm fields\n\t * @param {object} [config.files]\t\tArray of file names and file content\n\t * @param {object} [config.context]\t\tThe invocation context, describing the tool and project.\n\t * @param {boolean} [config.isBuffer=false]\tIndicate if the response should be treated as Buffer instead of JSON\n\t * @returns {Promise<RequestResponse, RequestError>} A promise that resolves with either the requested data or an error object\n\t */\n\trequest({\n\t\turi,\n\t\tmethod,\n\t\theaders = undefined,\n\t\tdata = undefined,\n\t\tauth,\n\t\tquery = undefined,\n\t\tform = undefined,\n\t\tfiles = undefined,\n\t\tcontext = undefined,\n\t\tisBuffer = false\n\t}){\n\t\tconst requestFiles = this._sanitizeFiles(files);\n\t\tconst requestParams = this._buildRequest({ uri, method, headers, data, auth, query, form, context, files: requestFiles });\n\t\treturn this._promiseResponse(requestParams, isBuffer);\n\t}\n\n\t/**\n\t * Promises to send the request and retreive the response.\n\t * @param {[string, object]} requestParams\tFirst argument is the URI to request, the second one are the options.\n\t * @param {boolean} isBuffer Indicate if the response body should be returned as a Buffer (Node) / ArrayBuffer (browser) instead of JSON\n\t * @param {function} [makerequest=fetch] The fetch function to use. Override for testing.\n\t * @returns {Promise<RequestResponse, RequestError>} A promise that resolves with either the requested data or an error object\n\t * @private\n\t */\n\t_promiseResponse(requestParams, isBuffer, makerequest = fetch) {\n\t\tlet status;\n\t\treturn makerequest(...requestParams)\n\t\t\t.then((resp) => {\n\t\t\t\tstatus = resp.status;\n\t\t\t\tif (!resp.ok) {\n\t\t\t\t\treturn resp.text().then((err) => {\n\t\t\t\t\t\tconst objError = JSON.parse(err);\n\t\t\t\t\t\t// particle-commnds/src/cmd/api expects response.text. to be a string\n\t\t\t\t\t\tconst response = Object.assign(resp, { text: err });\n\t\t\t\t\t\tthrow Object.assign(objError, { response });\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (status === 204) { // Can't do resp.json() since there is no body to parse\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\tif (isBuffer) {\n\t\t\t\t\treturn resp.blob();\n\t\t\t\t}\n\t\t\t\treturn resp.json();\n\t\t\t}).then((body) => {\n\t\t\t\tif (isBuffer) {\n\t\t\t\t\treturn body.arrayBuffer().then((arrayBuffer) => {\n\t\t\t\t\t\tif (!this.isForBrowser()) {\n\t\t\t\t\t\t\treturn Buffer.from(arrayBuffer);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn arrayBuffer;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tbody,\n\t\t\t\t\tstatusCode: status\n\t\t\t\t};\n\t\t\t}).catch((error) => {\n\t\t\t\tconst errorType = status ? `HTTP error ${status}` : 'Network error';\n\t\t\t\tlet errorDescription = `${errorType} from ${requestParams[0]}`;\n\t\t\t\tlet shortErrorDescription;\n\t\t\t\tif (error.error_description) { // Fetch responded with ok false\n\t\t\t\t\terrorDescription = `${errorDescription} - ${error.error_description}`;\n\t\t\t\t\tshortErrorDescription = error.error_description;\n\t\t\t\t}\n\t\t\t\tconst reason = new Error(errorDescription);\n\t\t\t\tObject.assign(reason, {\n\t\t\t\t\tstatusCode: status,\n\t\t\t\t\terrorDescription,\n\t\t\t\t\tshortErrorDescription,\n\t\t\t\t\terror,\n\t\t\t\t\tbody: error\n\t\t\t\t});\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Generate the params in a format valid for 'fetch'\n\t * @returns {[string, object]} The uri to make the request too, and extra configs\n\t * @private\n\t */\n\t_buildRequest({ uri, method, headers, data, auth, query, form, files, context }){\n\t\tlet actualUri = uri;\n\t\tif (this.baseUrl && uri[0] === '/') {\n\t\t\tactualUri = `${this.baseUrl}${uri}`;\n\t\t}\n\t\tif (query) {\n\t\t\tconst queryParams = qs.stringify(query);\n\t\t\tconst hasParams = actualUri.includes('?');\n\t\t\tactualUri = `${actualUri}${hasParams ? '&' : '?'}${queryParams}`;\n\t\t}\n\n\t\tconst userAgentHeader = { 'User-Agent': `${packageJson.name}/${packageJson.version} (${packageJson.repository.url})` };\n\t\tlet body;\n\t\tlet contentTypeHeader;\n\t\tif (files){\n\t\t\t// @ts-ignore\n\t\t\tcontentTypeHeader = {}; // Needed to allow fetch create its own\n\t\t\tbody = this._getFromData(files, form);\n\t\t} else if (form){\n\t\t\tcontentTypeHeader = { 'Content-Type': 'application/x-www-form-urlencoded' };\n\t\t\tbody = qs.stringify(form);\n\t\t} else if (data){\n\t\t\tcontentTypeHeader = { 'Content-Type': 'application/json' };\n\t\t\tbody = JSON.stringify(data);\n\t\t}\n\t\tconst finalHeaders = Object.assign({},\n\t\t\tuserAgentHeader,\n\t\t\tcontentTypeHeader,\n\t\t\tthis._getAuthorizationHeader(auth),\n\t\t\tthis._getContextHeaders(context),\n\t\t\theaders\n\t\t);\n\n\t\treturn [actualUri, { method, body, headers: finalHeaders }];\n\t}\n\n\tisForBrowser() {\n\t\treturn typeof window !== 'undefined';\n\t}\n\n\t_getFromData(files, form) {\n\t\tconst formData = new FormData();\n\t\tfor (let [name, file] of Object.entries(files)){\n\t\t\tlet path = file.path;\n\t\t\tlet fileData = file.data;\n\t\t\tif (!this.isForBrowser()) {\n\t\t\t\tconst nodeFormData = this._getNodeFormData(file);\n\t\t\t\tpath = nodeFormData.path;\n\t\t\t\tfileData = nodeFormData.file;\n\t\t\t}\n\t\t\tformData.append(name, fileData, path);\n\t\t}\n\t\tif (form){\n\t\t\tfor (let [name, value] of Object.entries(form)){\n\t\t\t\tformData.append(name, value);\n\t\t\t}\n\t\t}\n\t\treturn formData;\n\t}\n\n\t_getNodeFormData(file) {\n\t\tlet fileData = file.data;\n\t\tif (typeof file.data === 'string') {\n\t\t\tfileData = fs.createReadStream(file.data);\n\t\t}\n\t\treturn {\n\t\t\tfile: fileData,\n\t\t\tpath: { filepath: file.path } // Different API for nodejs\n\t\t};\n\t}\n\n\t_getContextHeaders(context = {}) {\n\t\treturn Object.assign({},\n\t\t\tthis._getToolContext(context.tool),\n\t\t\tthis._getProjectContext(context.project)\n\t\t);\n\t}\n\n\t_getToolContext(tool = {}){\n\t\tlet value = '';\n\t\tif (tool.name){\n\t\t\tvalue += this._toolIdent(tool);\n\t\t\tif (tool.components){\n\t\t\t\tfor (let component of tool.components){\n\t\t\t\t\tvalue += ', '+this._toolIdent(component);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (value){\n\t\t\treturn { 'X-Particle-Tool': value };\n\t\t}\n\t\treturn {};\n\t}\n\n\t_toolIdent(tool){\n\t\treturn this._nameAtVersion(tool.name, tool.version);\n\t}\n\n\t_nameAtVersion(name, version){\n\t\tlet value = '';\n\t\tif (name){\n\t\t\tvalue += name;\n\t\t\tif (version){\n\t\t\t\tvalue += '@'+version;\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n\n\t_getProjectContext(project = {}){\n\t\tlet value = this._buildSemicolonSeparatedProperties(project, 'name');\n\t\tif (value){\n\t\t\treturn { 'X-Particle-Project': value };\n\t\t}\n\t\treturn {};\n\t}\n\n\t/**\n\t * Creates a string like primaryPropertyValue; name=value; name1=value\n\t * from the properties of an object.\n\t * @param {object} obj               The object to create the string from\n\t * @param {string} primaryProperty   The name of the primary property which is the default value and must be defined.\n\t * @private\n\t * @return {string} The formatted string representing the object properties and the default property.\n\t */\n\t_buildSemicolonSeparatedProperties(obj, primaryProperty){\n\t\tlet value = '';\n\t\tif (obj[primaryProperty]){\n\t\t\tvalue += obj[primaryProperty];\n\t\t\tfor (let prop in obj){\n\t\t\t\tif (prop!==primaryProperty && obj.hasOwnProperty(prop)){\n\t\t\t\t\tvalue += '; '+prop+'='+obj[prop];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Adds an authorization header.\n\t * @param {string|object}  auth    The authorization bearer token.\n\t * @returns {object} The original request.\n\t */\n\t_getAuthorizationHeader(auth){\n\t\tif (!auth) {\n\t\t\treturn {};\n\t\t}\n\t\tif (typeof auth === 'string') {\n\t\t\treturn { Authorization: `Bearer ${auth}` };\n\t\t}\n\t\tlet encoded;\n\t\tif (this.isForBrowser()) {\n\t\t\tencoded = btoa(`${auth.username}:${auth.password}`);\n\t\t} else {\n\t\t\tencoded = Buffer.from(`${auth.username}:${auth.password}`)\n\t\t\t\t.toString('base64');\n\t\t}\n\t\treturn { Authorization: `Basic ${encoded}` };\n\t}\n\n\t/**\n\t *\n\t * @param {Object} files converts the file names to file, file1, file2.\n\t * @returns {object} the renamed files.\n\t */\n\t_sanitizeFiles(files){\n\t\tlet requestFiles;\n\t\tif (files){\n\t\t\trequestFiles = {};\n\t\t\tObject.keys(files).forEach((k, i) => {\n\t\t\t\tconst name = i ? `file${i + 1}` : 'file';\n\t\t\t\trequestFiles[name] = {\n\t\t\t\t\tdata: files[k],\n\t\t\t\t\tpath: k\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t\treturn requestFiles;\n\t}\n}\n\nmodule.exports = Agent;\n","const Library = require('./Library');\nlet Particle;\n\nclass Client {\n\tconstructor({ auth, api = new Particle() }){\n\t\tthis.auth = auth;\n\t\tthis.api = api;\n\t}\n\n\tready(){\n\t\treturn Boolean(this.auth);\n\t}\n\n\t/**\n\t * Get firmware library objects\n\t * @param  {Object} query The query parameters for libraries. See Particle.listLibraries\n\t * @returns {Promise} A promise\n\t */\n\tlibraries(query = {}){\n\t\treturn this.api.listLibraries(Object.assign({}, query, { auth: this.auth }))\n\t\t\t.then(payload => {\n\t\t\t\tconst libraries = payload.body.data || [];\n\t\t\t\treturn libraries.map(l => new Library(this, l));\n\t\t\t});\n\t}\n\n\t/**\n\t * Get one firmware library object\n\t * @param  {String} name Name of the library to fetch\n\t * @param  {Object} query The query parameters for libraries. See Particle.getLibrary\n\t * @returns {Promise} A promise\n\t */\n\tlibrary(name, query = {}){\n\t\treturn this.api.getLibrary(Object.assign({}, query, { name, auth: this.auth }))\n\t\t\t.then(payload => {\n\t\t\t\tconst library = payload.body.data || {};\n\t\t\t\treturn new Library(this, library);\n\t\t\t});\n\t}\n\n\t/**\n\t * Get list of library versions\n\t * @param  {String} name Name of the library to fetch\n\t * @param  {Object} query The query parameters for versions. See Particle.getLibraryVersions\n\t * @returns {Promise} A promise\n\t */\n\tlibraryVersions(name, query = {}){\n\t\treturn this.api.getLibraryVersions(Object.assign({}, query, { name, auth: this.auth }))\n\t\t\t.then(payload => {\n\t\t\t\tconst libraries = payload.body.data || [];\n\t\t\t\treturn libraries.map(l => new Library(this, l));\n\t\t\t});\n\t}\n\n\t/**\n\t * Contribute a new library version\n\t * @param  {Buffer} archive The compressed archive with the library source\n\t * @returns {Promise} A promise\n\t */\n\tcontributeLibrary(archive){\n\t\treturn this.api.contributeLibrary({ archive, auth: this.auth })\n\t\t\t.then(payload => {\n\t\t\t\tconst library = payload.body.data || {};\n\t\t\t\treturn new Library(this, library);\n\t\t\t}, error => {\n\t\t\t\tthis._throwError(error);\n\t\t\t});\n\t}\n\n\t/**\n\t * Make the the most recent private library version public\n\t * @param  {string} name The name of the library to publish\n\t * @return {Promise} To publish the library\n\t */\n\tpublishLibrary(name){\n\t\treturn this.api.publishLibrary({ name, auth: this.auth })\n\t\t\t.then(payload => {\n\t\t\t\tconst library = payload.body.data || {};\n\t\t\t\treturn new Library(this, library);\n\t\t\t}, error => {\n\t\t\t\tthis._throwError(error);\n\t\t\t});\n\t}\n\n\t/**\n\t * Delete an entire published library\n\t * @param {object} params\tSpecific params of the library to delete\n\t * @param {string} params.name\tName of the library to delete\n\t * @param {string} params.force\tKey to force deleting a public library\n\t * @returns {Promise} A promise\n\t */\n\tdeleteLibrary({ name, force }){\n\t\treturn this.api.deleteLibrary({ name, force, auth: this.auth })\n\t\t\t.then(() => true, error => this._throwError(error));\n\t}\n\n\t_throwError(error){\n\t\tif (error.body && error.body.errors){\n\t\t\tconst errorMessages = error.body.errors.map((e) => e.message).join('\\n');\n\t\t\tthrow new Error(errorMessages);\n\t\t}\n\t\tthrow error;\n\t}\n\n\tdownloadFile(uri){\n\t\treturn this.api.downloadFile({ uri });\n\t}\n\n\t/**\n\t * @param {Object} files Object containing files to be compiled\n\t * @param {Number} platformId Platform id number of the device you are compiling for\n\t * @param {String} targetVersion System firmware version to compile against\n\t * @returns {Promise} A promise\n\t * @deprecated Will be removed in 6.5\n\t */\n\tcompileCode(files, platformId, targetVersion){\n\t\treturn this.api.compileCode({ files, platformId, targetVersion, auth: this.auth });\n\t}\n\n\t/**\n\t * @param {object} params\n\t * @param {string} params.deviceId\tDevice ID or Name\n\t * @param {boolean} params.signal\tSignal on or off\n\t * @returns {Promise} A promise\n\t * @deprecated Will be removed in 6.5\n\t */\n\tsignalDevice({ signal, deviceId }){\n\t\treturn this.api.signalDevice({ signal, deviceId, auth: this.auth });\n\t}\n\n\t/**\n\t * @returns {Promise} A promise\n\t * @deprecated Will be removed in 6.5\n\t */\n\tlistDevices(){\n\t\treturn this.api.listDevices({ auth: this.auth });\n\t}\n\n\t/**\n\t * @returns {Promise} A promise\n\t * @deprecated Will be removed in 6.5\n\t */\n\tlistBuildTargets(){\n\t\treturn this.api.listBuildTargets({ onlyFeatured: true, auth: this.auth })\n\t\t\t.then(payload => {\n\t\t\t\tlet targets = [];\n\t\t\t\tfor (let target of payload.body.targets){\n\t\t\t\t\tfor (let platform of target.platforms){\n\t\t\t\t\t\ttargets.push({\n\t\t\t\t\t\t\tversion: target.version,\n\t\t\t\t\t\t\tplatform: platform,\n\t\t\t\t\t\t\tprerelease: target.prereleases.indexOf(platform) > -1,\n\t\t\t\t\t\t\tfirmware_vendor: target.firmware_vendor\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn targets;\n\t\t\t}, () => {});\n\t}\n\n\ttrackingIdentity({ full = false, context = undefined }={}){\n\t\treturn this.api.trackingIdentity({ full, context, auth: this.auth })\n\t\t\t.then(payload => {\n\t\t\t\treturn payload.body;\n\t\t\t});\n\t}\n}\n\nmodule.exports = Client;\nParticle = require('./Particle'); // Move it to after the export to avoid issue with circular reference\n","module.exports = {\n\tbaseUrl: 'https://api.particle.io',\n\tclientSecret: 'particle-api',\n\tclientId: 'particle-api',\n\ttokenDuration: 7776000, // 90 days\n\tauth: undefined\n};\n","/* eslint max-depth: 0 */\nconst http = require('http');\nconst https = require('https');\nconst url = require('url');\nconst { EventEmitter } = require('events');\n\nclass EventStream extends EventEmitter {\n\tconstructor(uri, token) {\n\t\tsuper();\n\t\tthis.uri = uri;\n\t\tthis.token = token;\n\t\tthis.reconnectInterval = 2000;\n\t\tthis.timeout = 13000; // keep alive can be sent up to 12 seconds after last event\n\t\tthis.data = '';\n\t\tthis.buf = '';\n\n\t\tthis.parse = this.parse.bind(this);\n\t\tthis.end = this.end.bind(this);\n\t\tthis.idleTimeoutExpired = this.idleTimeoutExpired.bind(this);\n\t}\n\n\tconnect() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst { hostname, protocol, port, path } = url.parse(this.uri);\n\t\t\tthis.origin = `${protocol}//${hostname}${port ? (':' + port) : ''}`;\n\n\t\t\tconst isSecure = protocol === 'https:';\n\t\t\tconst requestor = isSecure ? https : http;\n\t\t\tconst req = requestor.request({\n\t\t\t\thostname,\n\t\t\t\tprotocol,\n\t\t\t\tpath: `${path}?access_token=${this.token}`,\n\t\t\t\tmethod: 'get',\n\t\t\t\tport: parseInt(port, 10) || (isSecure ? 443 : 80),\n\t\t\t\t// @ts-ignore\n\t\t\t\tmode: 'prefer-streaming'\n\t\t\t});\n\n\t\t\tthis.req = req;\n\n\t\t\tlet connected = false;\n\t\t\tlet connectionTimeout = setTimeout(() => {\n\t\t\t\tif (this.req) {\n\t\t\t\t\tthis.req.abort();\n\t\t\t\t}\n\t\t\t\treject({ error: new Error('Timeout'), errorDescription: `Timeout connecting to ${this.uri}` });\n\t\t\t}, this.timeout);\n\n\t\t\treq.on('error', e => {\n\t\t\t\tclearTimeout(connectionTimeout);\n\n\t\t\t\tif (connected) {\n\t\t\t\t\tthis.end();\n\t\t\t\t} else {\n\t\t\t\t\treject({ error: e, errorDescription: `Network error from ${this.uri}` });\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treq.on('response', res => {\n\t\t\t\tclearTimeout(connectionTimeout);\n\n\t\t\t\tconst statusCode = res.statusCode;\n\t\t\t\tif (statusCode !== 200) {\n\t\t\t\t\tlet body = '';\n\t\t\t\t\tres.on('data', chunk => body += chunk);\n\t\t\t\t\tres.on('end', () => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tbody = JSON.parse(body);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// don't bother doing anything special if the JSON.parse fails\n\t\t\t\t\t\t\t// since we are already about to reject the promise anyway\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tlet errorDescription = `HTTP error ${statusCode} from ${this.uri}`;\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tif (body && body.error_description) {\n\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\terrorDescription += ' - ' + body.error_description;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treject({ statusCode, errorDescription, body });\n\t\t\t\t\t\t\tthis.req = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.data = '';\n\t\t\t\tthis.buf = '';\n\n\t\t\t\tconnected = true;\n\t\t\t\tres.on('data', this.parse);\n\t\t\t\tres.once('end', this.end);\n\t\t\t\tthis.startIdleTimeout();\n\t\t\t\tresolve(this);\n\t\t\t});\n\t\t\treq.end();\n\t\t});\n\t}\n\n\tabort() {\n\t\tif (this.req) {\n\t\t\tthis.req.abort();\n\t\t\tthis.req = undefined;\n\t\t}\n\t\tthis.removeAllListeners();\n\t}\n\n\t/* Private methods */\n\n\temitSafe(event, param) {\n\t\ttry {\n\t\t\tthis.emit(event, param);\n\t\t} catch (error) {\n\t\t\tif (event !== 'error') {\n\t\t\t\tthis.emitSafe('error', error);\n\t\t\t}\n\t\t}\n\t}\n\n\tend() {\n\t\tthis.stopIdleTimeout();\n\n\t\tif (!this.req) {\n\t\t\t// request was ended intentionally by abort\n\t\t\t// do not auto reconnect.\n\t\t\treturn;\n\t\t}\n\n\t\tthis.req = undefined;\n\t\tthis.emitSafe('disconnect');\n\t\tthis.reconnect();\n\t}\n\n\treconnect() {\n\t\tsetTimeout(() => {\n\t\t\tif (this.isOffline()) {\n\t\t\t\tthis.reconnect();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.emitSafe('reconnect');\n\t\t\tthis.connect().then(() => {\n\t\t\t\tthis.emitSafe('reconnect-success');\n\t\t\t}).catch(err => {\n\t\t\t\tthis.emitSafe('reconnect-error', err);\n\t\t\t\tthis.reconnect();\n\t\t\t});\n\t\t}, this.reconnectInterval);\n\t}\n\n\tisOffline() {\n\t\tif (typeof navigator === 'undefined' || navigator.hasOwnProperty('onLine')) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !navigator.onLine;\n\t}\n\n\tstartIdleTimeout() {\n\t\tthis.stopIdleTimeout();\n\t\tthis.idleTimeout = setTimeout(this.idleTimeoutExpired, this.timeout);\n\t}\n\n\tstopIdleTimeout() {\n\t\tif (this.idleTimeout) {\n\t\t\tclearTimeout(this.idleTimeout);\n\t\t\tthis.idleTimeout = null;\n\t\t}\n\t}\n\n\tidleTimeoutExpired() {\n\t\tif (this.req) {\n\t\t\tthis.req.abort();\n\t\t\tthis.end();\n\t\t}\n\t}\n\n\tparse(chunk) {\n\t\tthis.startIdleTimeout();\n\n\t\tthis.buf += chunk;\n\t\tlet pos = 0;\n\t\tlet length = this.buf.length;\n\t\tlet discardTrailingNewline = false;\n\n\t\twhile (pos < length) {\n\t\t\tif (discardTrailingNewline) {\n\t\t\t\tif (this.buf[pos] === '\\n') {\n\t\t\t\t\t++pos;\n\t\t\t\t}\n\t\t\t\tdiscardTrailingNewline = false;\n\t\t\t}\n\n\t\t\tlet lineLength = -1;\n\t\t\tlet fieldLength = -1;\n\n\t\t\tfor (let i = pos; lineLength < 0 && i < length; ++i) {\n\t\t\t\tconst c = this.buf[i];\n\t\t\t\tif (c === ':') {\n\t\t\t\t\tif (fieldLength < 0) {\n\t\t\t\t\t\tfieldLength = i - pos;\n\t\t\t\t\t}\n\t\t\t\t} else if (c === '\\r') {\n\t\t\t\t\tdiscardTrailingNewline = true;\n\t\t\t\t\tlineLength = i - pos;\n\t\t\t\t} else if (c === '\\n') {\n\t\t\t\t\tlineLength = i - pos;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (lineLength < 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.parseEventStreamLine(pos, fieldLength, lineLength);\n\n\t\t\tpos += lineLength + 1;\n\t\t}\n\n\t\tif (pos === length) {\n\t\t\tthis.buf = '';\n\t\t} else if (pos > 0) {\n\t\t\tthis.buf = this.buf.slice(pos);\n\t\t}\n\t}\n\n\tparseEventStreamLine(pos, fieldLength, lineLength) {\n\t\tif (lineLength === 0) {\n\t\t\ttry {\n\t\t\t\tif (this.data.length > 0 && this.event) {\n\t\t\t\t\tconst event = JSON.parse(this.data);\n\t\t\t\t\tevent.name = this.eventName || '';\n\t\t\t\t\tthis.emitSafe('event', event);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// do nothing if JSON.parse fails\n\t\t\t} finally {\n\t\t\t\tthis.data = '';\n\t\t\t\tthis.eventName = undefined;\n\t\t\t\tthis.event = false;\n\t\t\t}\n\t\t} else if (fieldLength > 0) {\n\t\t\tconst field = this.buf.slice(pos, pos + fieldLength);\n\t\t\tlet step = 0;\n\n\t\t\tif (this.buf[pos + fieldLength + 1] !== ' ') {\n\t\t\t\tstep = fieldLength + 1;\n\t\t\t} else {\n\t\t\t\tstep = fieldLength + 2;\n\t\t\t}\n\t\t\tpos += step;\n\t\t\tconst valueLength = lineLength - step;\n\t\t\tconst value = this.buf.slice(pos, pos + valueLength);\n\n\t\t\tif (field === 'data') {\n\t\t\t\tthis.data += value + '\\n';\n\t\t\t} else if (field === 'event') {\n\t\t\t\tthis.eventName = value;\n\t\t\t\tthis.event = true;\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = EventStream;\n","/* Library\n * Represents a version of a library contributed in the cloud.\n */\n\nclass Library {\n\tconstructor(client, data) {\n\t\t// Make client non-enumerable so it doesn't show up in Object.keys, JSON.stringify, etc\n\t\tObject.defineProperty(this, 'client', { value: client });\n\t\tthis._assignAttributes(data);\n\t\tthis.downloadUrl = data.links && data.links.download;\n\t}\n\n\t_assignAttributes(data) {\n\t\tObject.assign(this, data.attributes);\n\t}\n\n\n\t/**\n\t * Download the compressed file containing the source code for this library version.\n\t * @return {Promise} Resolves to the .tar.gz compressed source code\n\t */\n\tdownload() {\n\t\tif (!this.downloadUrl) {\n\t\t\treturn Promise.reject(new Error('No download URL for this library'));\n\t\t}\n\t\t// @ts-ignore\n\t\treturn this.client.downloadFile(this.downloadUrl);\n\t}\n\n\t/* TODO: add a versions() method to fetch an array of library objects */\n}\n\nmodule.exports = Library;\n","const Defaults = require('./Defaults');\nconst EventStream = require('./EventStream');\nconst Agent = require('./Agent');\nconst Client = require('./Client');\n\n// Hack to avoid importing the type on every @return statement\n/**\n * @typedef {import('./Agent').RequestResponse} RequestResponse\n */\n/**\n * @typedef {import('./Agent').RequestError} RequestError\n */\n\n/**\n * Particle Cloud API wrapper.\n *\n * See <https://docs.particle.io/reference/javascript/> for examples\n * of using the `Particle` class.\n *\n * Most Particle methods take a single unnamed argument object documented as\n * `options` with key/value pairs for each option.\n */\nclass Particle {\n\t/**\n\t * Contructor for the Cloud API wrapper.\n\t *\n\t * Create a new Particle object and call methods below on it.\n\t *\n\t * @param  {Object} options Options for this API call Options to be used for all requests (see [Defaults](../src/Defaults.js))\n\t */\n\tconstructor(options = {}){\n\t\tif (options.auth) {\n\t\t\tthis.setDefaultAuth(options.auth);\n\t\t}\n\n\t\t// todo - this seems a bit dangerous - would be better to put all options/context in a contained object\n\t\tObject.assign(this, Defaults, options);\n\t\tthis.context = {};\n\t\tthis.agent = new Agent(this.baseUrl);\n\t}\n\n\t_isValidContext(name, context){\n\t\treturn (name==='tool' || name==='project') && context!==undefined;\n\t}\n\n\tsetContext(name, context){\n\t\tif (context!==undefined){\n\t\t\tif (this._isValidContext(name, context)){\n\t\t\t\tthis.context[name] = context;\n\t\t\t} else {\n\t\t\t\tthrow Error('unknown context name or undefined context: '+name);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Builds the final context from the context parameter and the context items in the api.\n\t * @param  {Object} context       The invocation context, this takes precedence over the local context.\n\t * @returns {Object} The context to use.\n\t * @private\n\t */\n\t_buildContext(context){\n\t\treturn Object.assign(this.context, context);\n\t}\n\n\t/**\n\t * Login to Particle Cloud using an existing Particle acccount.\n\t * @param  {Object} options                Options for this API call\n\t * @param  {String} options.username       Username for the Particle account\n\t * @param  {String} options.password       Password for the Particle account\n\t * @param  {Number} options.tokenDuration  How long the access token should last in seconds\n\t * @param  {Object} [options.headers]      Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param  {Number} [options.context]      Request context\n\t * @returns {Promise} A promise\n\t */\n\t// @ts-ignore\n\tlogin({ username, password, tokenDuration = this.tokenDuration, headers, context }){\n\t\treturn this.request({\n\t\t\turi: '/oauth/token',\n\t\t\tmethod: 'post',\n\t\t\theaders,\n\t\t\tform: {\n\t\t\t\tusername,\n\t\t\t\tpassword,\n\t\t\t\tgrant_type: 'password',\n\t\t\t\t// @ts-ignore\n\t\t\t\tclient_id: this.clientId,\n\t\t\t\t// @ts-ignore\n\t\t\t\tclient_secret: this.clientSecret,\n\t\t\t\texpires_in: tokenDuration\n\t\t\t},\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * If login failed with an 'mfa_required' error, this must be called with a valid OTP code to login\n\t * @param  {Object} options            Options for this API call\n\t * @param  {String} options.mfaToken   Given as 'mfa_token' in the error body of `.login()`.\n\t * @param  {String} options.otp        Current one-time-password generated from the authentication application\n\t * @param  {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param  {Number} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tsendOtp({ mfaToken, otp, headers, context }){\n\t\treturn this.request({\n\t\t\turi: '/oauth/token',\n\t\t\tmethod: 'post',\n\t\t\theaders,\n\t\t\tform: {\n\t\t\t\tgrant_type: 'urn:custom:mfa-otp',\n\t\t\t\tmfa_token: mfaToken,\n\t\t\t\totp,\n\t\t\t\t// @ts-ignore\n\t\t\t\tclient_id: this.clientId,\n\t\t\t\t// @ts-ignore\n\t\t\t\tclient_secret: this.clientSecret\n\t\t\t},\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Enable MFA on the currently logged in user\n\t * @param {Object} options             Options for this API call\n\t * @param {Object} options.auth        Access token\n\t * @param  {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]   Request context\n\t * @returns {Promise} A promise\n\t */\n\tenableMfa({ auth, headers, context }){\n\t\treturn this.get({ uri: '/v1/user/mfa-enable', auth, headers, context });\n\t}\n\n\t/**\n\t * Confirm MFA for the user. This must be called with current TOTP code, determined from the results of enableMfa(). You will be prompted to enter an OTP code every time you login after enrollment is confirmed.\n\t * @param {Object} options            Options for this API call\n\t * @param {Object} options.auth       Access token\n\t * @param {Object} options.mfaToken   Token given from previous step to\n\t * @param {Object} options.otp        Current one-time-password generated from the authentication app\n\t * @param {Boolean} options.invalidateTokens Should all tokens be invalidated\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tconfirmMfa({ mfaToken, otp, invalidateTokens = false, auth, headers, context }){\n\t\tlet data =  { mfa_token: mfaToken, otp };\n\n\t\tif (invalidateTokens) {\n\t\t\tdata.invalidate_tokens = true;\n\t\t}\n\n\t\treturn this.post({\n\t\t\turi: '/v1/user/mfa-enable',\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tdata,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Disable MFA for the user.\n\t * @param {Object} options                  Options for this API call\n\t * @param {Object} options.auth             Access token\n\t * @param {Object} options.currentPassword  User's current password\n\t * @param {Object} [options.headers]        Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]        Request context\n\t * @returns {Promise} A promise\n\t */\n\tdisableMfa({ currentPassword, auth, headers, context }){\n\t\treturn this.put({\n\t\t\turi: '/v1/user/mfa-disable',\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tdata: { current_password: currentPassword },\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Create Customer for Product.\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.email      Username for the Particle account\n\t * @param {String} options.password   Password for the Particle account\n\t * @param {String} options.product    Create the customer in this product ID or slug\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tcreateCustomer({ email, password, product, headers, context }){\n\t\treturn this.request({\n\t\t\turi: `/v1/products/${product}/customers`,\n\t\t\tmethod: 'post',\n\t\t\theaders,\n\t\t\tform: {\n\t\t\t\temail,\n\t\t\t\tpassword,\n\t\t\t\tgrant_type: 'client_credentials',\n\t\t\t\t// @ts-ignore\n\t\t\t\tclient_id: this.clientId,\n\t\t\t\t// @ts-ignore\n\t\t\t\tclient_secret: this.clientSecret\n\t\t\t},\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Login to Particle Cloud using an OAuth client.\n\t * @param {Object} options            Options for this API call\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tloginAsClientOwner({ headers, context }){\n\t\treturn this.request({\n\t\t\turi: '/oauth/token',\n\t\t\tmethod: 'post',\n\t\t\theaders,\n\t\t\tform: {\n\t\t\t\tgrant_type: 'client_credentials',\n\t\t\t\t// @ts-ignore\n\t\t\t\tclient_id: this.clientId,\n\t\t\t\t// @ts-ignore\n\t\t\t\tclient_secret: this.clientSecret\n\t\t\t},\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Create a user account for the Particle Cloud\n\t * @param {Object} options              Options for this API call\n\t * @param {String} options.username     Email of the new user\n\t * @param {String} options.password     Password\n\t * @param {String} options.accountInfo  Object that contains account information fields such as user real name, company name, business account flag etc\n\t * @param {Object} [options.headers]    Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]    Request context\n\t * @returns {Promise} A promise\n\t */\n\tcreateUser({ username, password, accountInfo, headers, context }){\n\t\treturn this.post({\n\t\t\turi: '/v1/users',\n\t\t\theaders,\n\t\t\tdata: {\n\t\t\t\tusername,\n\t\t\t\tpassword,\n\t\t\t\taccount_info : accountInfo\n\t\t\t},\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Verify new user account via verification email\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.token      The string token sent in the verification email\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tverifyUser({ token, headers, context }){\n\t\treturn this.post({\n\t\t\turi: '/v1/user/verify',\n\t\t\theaders,\n\t\t\tdata: { token },\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Send reset password email for a Particle Cloud user account\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.username   Email of the user\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tresetPassword({ username, headers, context }){\n\t\treturn this.post({\n\t\t\turi: '/v1/user/password-reset',\n\t\t\theaders,\n\t\t\tdata: { username },\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Revoke an access token\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.username   Username of the Particle cloud account that the token belongs to.\n\t * @param {String} options.password   Password for the account\n\t * @param {String} options.token      Access token you wish to revoke\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tdeleteAccessToken({ username, password, token, headers, context }){\n\t\treturn this.delete({\n\t\t\turi: `/v1/access_tokens/${token}`,\n\t\t\tauth: { username, password },\n\t\t\theaders,\n\t\t\tdata: { access_token: token },\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Revoke the current session access token\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tdeleteCurrentAccessToken({ auth, headers, context }){\n\t\treturn this.delete({\n\t\t\turi: '/v1/access_tokens/current',\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Revoke all active access tokens\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tdeleteActiveAccessTokens({ auth, headers, context }){\n\t\treturn this.delete({\n\t\t\turi: '/v1/access_tokens',\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Delete the current user\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.auth       Access Token\n\t * @param {String} options.password   Password\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tdeleteUser({ auth, password, headers, context }){\n\t\treturn this.delete({\n\t\t\turi: '/v1/user',\n\t\t\tdata: { password },\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * List all valid access tokens for a Particle Cloud account\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.username   Username\n\t * @param {String} options.password   Password\n\t * @param {String} options.otp        Current one-time-password generated from the authentication application\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tlistAccessTokens({ username, password, otp, headers, context }){\n\t\treturn this.get({\n\t\t\turi: '/v1/access_tokens',\n\t\t\tauth: { username, password },\n\t\t\tquery: otp ? { otp } : undefined,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves the information that is used to identify the current login for tracking.\n\t * @param {Object} [options]          Options for this API call\n\t * @param {String} [options.auth]     The access token\n\t * @param {Boolean} [options.full]    When true, retrieve all information for registering a user with the tracking API. When false,\n\t *                                    retrieve only the unique tracking ID for the current login.\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise<Object>} Resolve the tracking identify of the current login\n\t */\n\ttrackingIdentity({ full = false, auth, headers, context } = {}){\n\t\treturn this.get({\n\t\t\turi: '/v1/user/identify',\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tquery: (full ? undefined : { tracking: 1 }),\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * List devices claimed to the account or product\n\t * @param {Object} options                   Options for this API call\n\t * @param {String} [options.deviceId]        (Product only) Filter results to devices with this ID (partial matching)\n\t * @param {String} [options.deviceName]      (Product only) Filter results to devices with this name (partial matching)\n\t * @param {Array.<string>} [options.groups]  (Product only) A list of full group names to filter results to devices belonging to these groups only.\n\t * @param {String} [options.sortAttr]        (Product only) The attribute by which to sort results. See API docs for options.\n\t * @param {String} [options.sortDir]         (Product only) The direction of sorting. See API docs for options.\n\t * @param {Number} [options.page]            (Product only) Current page of results\n\t * @param {Number} [options.perPage]         (Product only) Records per page\n\t * @param {String} [options.product]         List devices in this product ID or slug\n\t * @param {String} options.auth              Access Token\n\t * @param {Object} [options.headers]         Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]         Request context\n\t * @returns {Promise} A promise\n\t */\n\tlistDevices({ deviceId, deviceName, groups, sortAttr, sortDir, page, perPage, product, auth, headers, context }){\n\t\tlet uri, query;\n\n\t\tif (product){\n\t\t\turi = `/v1/products/${product}/devices`;\n\t\t\tquery = {\n\t\t\t\tdeviceId,\n\t\t\t\tdeviceName,\n\t\t\t\tgroups: Array.isArray(groups) ? groups.join(',') : undefined,\n\t\t\t\tsortAttr,\n\t\t\t\tsortDir,\n\t\t\t\tpage,\n\t\t\t\tper_page: perPage\n\t\t\t};\n\t\t} else {\n\t\t\turi = '/v1/devices';\n\t\t}\n\n\t\treturn this.get({ uri, auth, headers, query, context });\n\t}\n\n\t/**\n\t * Get detailed informationa about a device\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.deviceId   Device ID or Name\n\t * @param {String} [options.product]  Device in this product ID or slug\n\t * @param {String} options.auth       Access token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tgetDevice({ deviceId, product, auth, headers, context }){\n\t\tconst uri = this.deviceUri({ deviceId, product });\n\t\treturn this.get({ uri, auth, headers, context });\n\t}\n\n\t/**\n\t * Claim a device to the account. The device must be online and unclaimed.\n\t * @param {Object} options\t\t\tOptions for this API call\n\t * @param {String} options.deviceId   \t\tDevice ID\n\t * @param {String} options.auth       \t\tAccess Token\n\t * @param {boolean} options.requestTransfer     True to request the device be transfered from another user\n\t * @param {Object} [options.headers]\t\tKey/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  \t\tRequest context\n\t * @returns {Promise} A promise\n\t */\n\tclaimDevice({ deviceId, requestTransfer, auth, headers, context }){\n\t\treturn this.post({\n\t\t\turi: '/v1/devices',\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tdata: {\n\t\t\t\tid: deviceId,\n\t\t\t\trequest_transfer: !!requestTransfer\n\t\t\t},\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Add a device to a product or move device out of quarantine.\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.deviceId   Device ID\n\t * @param {Object} options.file       A file that contains a single-column list of device IDs, device serial numbers, device IMEIs, or devie ICCIDs.\n\t *                                    Node: Either a path or Buffer. Browser: a File or Blob.\n\t * @param {String} options.product    Add to this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\taddDeviceToProduct({ deviceId, product, file, auth, headers, context }){\n\t\tlet files, data;\n\n\t\tif (file){\n\t\t\tfiles = { file };\n\t\t} else if (deviceId){\n\t\t\tdata = { id: deviceId };\n\t\t}\n\n\t\treturn this.request({\n\t\t\turi: `/v1/products/${product}/devices`,\n\t\t\tmethod: 'post',\n\t\t\theaders,\n\t\t\tdata,\n\t\t\tfiles,\n\t\t\tauth,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Unclaim / Remove a device from your account or product, or deny quarantine\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.deviceId   Device ID or Name\n\t * @param {Boolean} [options.deny]    (Product only) Deny this quarantined device, instead of removing an already approved device\n\t * @param {String} options.product    Remove from this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tremoveDevice({ deviceId, deny, product, auth, headers, context }){\n\t\tconst uri = this.deviceUri({ deviceId, product });\n\t\tconst data = product ? { deny } : undefined;\n\t\treturn this.delete({ uri, data, auth, headers, context });\n\t}\n\n\t/**\n\t * Unclaim a product device its the owner, but keep it in the product\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.deviceId   Device ID or Name\n\t * @param {String} options.product    Remove from this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tremoveDeviceOwner({ deviceId, product, auth, headers, context }){\n\t\tconst uri = `/v1/products/${product}/devices/${deviceId}/owner`;\n\t\treturn this.delete({ uri, auth, headers, context });\n\t}\n\n\t/**\n\t * Rename a device\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.deviceId   Device ID or Name\n\t * @param {String} options.name       Desired Name\n\t * @param {String} [options.product]  Rename device in this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\trenameDevice({ deviceId, name, product, auth, headers, context }){\n\t\treturn this.updateDevice({ deviceId, name, product, auth, headers, context });\n\t}\n\n\t/**\n\t * Instruct the device to turn on/off the LED in a rainbow pattern\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.deviceId   Device ID or Name\n\t * @param {Boolean} options.signal    Signal on or off\n\t * @param {String} [options.product]  Device in this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tsignalDevice({ deviceId, signal, product, auth, headers, context }){\n\t\treturn this.updateDevice({ deviceId, signal, product, auth, headers, context });\n\t}\n\n\t/**\n\t * Store some notes about device\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.deviceId   Device ID or Name\n\t * @param {String} options.notes      Your notes about this device\n\t * @param {String} [options.product]  Device in this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tsetDeviceNotes({ deviceId, notes, product, auth, headers, context }){\n\t\treturn this.updateDevice({ deviceId, notes, product, auth, headers, context });\n\t}\n\n\t/**\n\t * Mark device as being used in development of a product so it opts out of automatic firmware updates\n\t * @param {Object} options               Options for this API call\n\t * @param {String} options.deviceId      Device ID or Name\n\t * @param {Boolean} options.development  Set to true to mark as development, false to return to product fleet\n\t * @param {String} options.product       Device in this product ID or slug\n\t * @param {String} options.auth          Access Token\n\t * @param {Object} [options.headers]     Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]     Request context\n\t * @returns {Promise} A promise\n\t */\n\tmarkAsDevelopmentDevice({ deviceId, development = true, product, auth, headers, context }){\n\t\treturn this.updateDevice({ deviceId, development, product, auth, headers, context });\n\t}\n\n\t/**\n\t * Mark device as being used in development of a product so it opts out of automatic firmware updates\n\t * @param {Object} options                         Options for this API call\n\t * @param {String} options.deviceId                Device ID or Name\n\t * @param {Number} options.desiredFirmwareVersion  Lock the product device to run this firmware version.\n\t * @param {Boolean} [options.flash]                Immediately flash firmware indicated by desiredFirmwareVersion\n\t * @param {String} options.product                 Device in this product ID or slug\n\t * @param {String} options.auth                    Access Token\n\t * @param {Object} [options.headers]               Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]               Request context\n\t * @returns {Promise} A promise\n\t */\n\tlockDeviceProductFirmware({ deviceId, desiredFirmwareVersion, flash, product, auth, context }){\n\t\treturn this.updateDevice({ deviceId, desiredFirmwareVersion, flash, product, auth, context });\n\t}\n\n\t/**\n\t * Mark device as receiving automatic firmware updates\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.deviceId   Device ID or Name\n\t * @param {String} options.product    Device in this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tunlockDeviceProductFirmware({ deviceId, product, auth, headers, context }){\n\t\treturn this.updateDevice({ deviceId, desiredFirmwareVersion: null, product, auth, headers, context });\n\t}\n\n\t/**\n\t * Update multiple device attributes at the same time\n\t * @param {Object} options                           Options for this API call\n\t * @param {String} options.deviceId                  Device ID or Name\n\t * @param {String} [options.name]                    Desired Name\n\t * @param {Boolean} [options.signal]                   Signal device on or off\n\t * @param {String} [options.notes]                   Your notes about this device\n\t * @param {Boolean} [options.development]            (Product only) Set to true to mark as development, false to return to product fleet\n\t * @param {Number} [options.desiredFirmwareVersion]  (Product only) Lock the product device to run this firmware version.\n\t *                                                   Pass `null` to unlock firmware and go back to released firmware.\n\t * @param {Boolean} [options.flash]                  (Product only) Immediately flash firmware indicated by desiredFirmwareVersion\n\t * @param {String} [options.product]                 Device in this product ID or slug\n\t * @param {String} options.auth                      Access Token\n\t * @param {Object} [options.headers]                 Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]                 Request context\n\t * @returns {Promise} A promise\n\t */\n\tupdateDevice({ deviceId, name, signal, notes, development, desiredFirmwareVersion, flash, product, auth, headers, context }){\n\t\tlet signalValue;\n\t\tif (signal !== undefined){\n\t\t\tsignalValue = signal ? '1' : '0';\n\t\t}\n\n\t\tconst uri = this.deviceUri({ deviceId, product });\n\t\tconst data = product ?\n\t\t\t{ name, signal: signalValue, notes, development, desired_firmware_version: desiredFirmwareVersion, flash } :\n\t\t\t{ name, signal: signalValue, notes };\n\n\t\treturn this.put({ uri, auth, headers, data, context });\n\t}\n\n\t/**\n\t * Provision a new device for products that allow self-provisioning\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.productId  Product ID where to create this device\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tprovisionDevice({ productId, auth, headers, context }){\n\t\treturn this.post({\n\t\t\turi: '/v1/devices',\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tdata: { product_id: productId },\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Generate a claim code to use in the device claiming process.\n\t * To generate a claim code for a product, the access token MUST belong to a\n\t * customer of the product.\n\t * @param {Object} options            Options for this API call\n\t * @param {String} [options.iccid]    ICCID of the SIM card used in the Electron\n\t * @param {String} [options.product]  Device in this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tgetClaimCode({ iccid, product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/device_claims` : '/v1/device_claims';\n\t\treturn this.post({ uri, auth, headers, data: { iccid }, context });\n\t}\n\n\tvalidatePromoCode({ promoCode, auth, headers, context }){\n\t\treturn this.get({\n\t\t\turi: `/v1/promo_code/${promoCode}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\tchangeProduct({ deviceId, productId, auth, headers, context }){\n\t\treturn this.put({\n\t\t\turi: `/v1/devices/${deviceId}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tdata: { product_id: productId },\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Get the value of a device variable\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.deviceId   Device ID or Name\n\t * @param {String} options.name       Variable name\n\t * @param {String} [options.product]  Device in this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tgetVariable({ deviceId, name, product, auth, headers, context }){\n\t\tconst uri = product ?\n\t\t\t`/v1/products/${product}/devices/${deviceId}/${name}` :\n\t\t\t`/v1/devices/${deviceId}/${name}`;\n\n\t\treturn this.get({ uri, auth, headers, context });\n\t}\n\n\t/**\n\t * Compile and flash application firmware to a device. Pass a pre-compiled binary to flash it directly to the device.\n\t * @param {Object} options                         Options for this API call\n\t * @param {String} options.deviceId                Device ID or Name\n\t * @param {String} options.product                 Flash device in this product ID or slug\n\t * @param {Object} options.files                   Object containing files to be compiled and flashed. Keys should be the filenames, including relative path, and the values should be a path or Buffer of the file contents in Node, or a File or Blob in the browser.\n\t * @param {String} [options.targetVersion=latest]  System firmware version to compile against\n\t * @param {String} options.auth                    Access Token\n\t * @param {Object} [options.headers]               Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]               Request context\n\t * @returns {Promise} A promise\n\t */\n\tflashDevice({ deviceId, product, files, targetVersion, auth, headers, context }){\n\t\tconst uri = this.deviceUri({ deviceId, product });\n\t\tconst form = {};\n\n\t\tif (targetVersion){\n\t\t\tform.build_target_version = targetVersion;\n\t\t} else {\n\t\t\tform.latest = 'true';\n\t\t}\n\n\t\treturn this.request({ uri, method: 'put', auth, headers, files, form, context });\n\t}\n\n\t/**\n\t * DEPRECATED: Flash the Tinker application to a device. Instead compile and flash the Tinker source code.\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.deviceId   Device ID or Name\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tflashTinker({ deviceId, auth, headers, context }){\n\t\t/* eslint-disable no-console */\n\t\t/* @ts-ignore */\n\t\tif (console && console.warning){\n\t\t\t// @ts-ignore\n\t\t\tconsole.warning('Particle.flashTinker is deprecated');\n\t\t}\n\t\t/* eslint-enable no-console */\n\t\treturn this.put({\n\t\t\turi: `/v1/devices/${deviceId}`,\n\t\t\theaders,\n\t\t\tdata: { app: 'tinker' },\n\t\t\tauth,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Compile firmware using the Particle Cloud\n\t * @param {Object} options                         Options for this API call\n\t * @param {Object} options.files                   Object containing files to be compiled. Keys should be the filenames, including relative path, and the values should be a path or Buffer of the file contents in Node, or a File or Blob in the browser.\n\t * @param {Number} [options.platformId]            Platform id number of the device you are compiling for. Common values are 0=Core, 6=Photon, 10=Electron.\n\t * @param {String} [options.targetVersion=latest]  System firmware version to compile against\n\t * @param {String} options.auth                    Access Token\n\t * @param {Object} [options.headers]               Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]               Request context\n\t * @returns {Promise} A promise\n\t */\n\tcompileCode({ files, platformId, targetVersion, auth, headers, context }){\n\t\tconst form = { platform_id: platformId };\n\n\t\tif (targetVersion){\n\t\t\tform.build_target_version = targetVersion;\n\t\t} else {\n\t\t\tform.latest = 'true';\n\t\t}\n\n\t\treturn this.request({\n\t\t\turi: '/v1/binaries',\n\t\t\tmethod: 'post',\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tfiles,\n\t\t\tform,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Download a firmware binary\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.binaryId   Binary ID received from a successful compile call\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise<RequestResponse, RequestError>} A promise\n\t */\n\tdownloadFirmwareBinary({ binaryId, auth, headers, context }){\n\t\treturn this.request({\n\t\t\turi: `/v1/binaries/${binaryId}`,\n\t\t\tmethod: 'get',\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext,\n\t\t\tisBuffer: true\n\t\t});\n\t}\n\n\t/**\n\t * Send a new device public key to the Particle Cloud\n\t * @param {Object} options                  Options for this API call\n\t * @param {String} options.deviceId         Device ID or Name\n\t * @param {(String|Buffer)} options.key     Public key contents\n\t * @param {String} [options.algorithm=rsa]  Algorithm used to generate the public key. Valid values are `rsa` or `ecc`.\n\t * @param {String} options.auth             Access Token\n\t * @param {Object} [options.headers]        Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]        Request context\n\t * @returns {Promise} A promise\n\t */\n\tsendPublicKey({ deviceId, key, algorithm, auth, headers, context }){\n\t\treturn this.post({\n\t\t\turi: `/v1/provisioning/${deviceId}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tdata: {\n\t\t\t\tdeviceID: deviceId,\n\t\t\t\tpublicKey: ( typeof key === 'string' ? key : key.toString() ),\n\t\t\t\tfilename: 'particle-api',\n\t\t\t\torder: `manual_${ Date.now() }`,\n\t\t\t\talgorithm: algorithm || 'rsa'\n\t\t\t},\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Call a device function\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.deviceId   Device ID or Name\n\t * @param {String} options.name       Function name\n\t * @param {String} options.argument   Function argument\n\t * @param {String} [options.product]  Device in this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tcallFunction({ deviceId, name, argument, product, auth, headers, context }){\n\t\tconst uri = product ?\n\t\t\t`/v1/products/${product}/devices/${deviceId}/${name}` :\n\t\t\t`/v1/devices/${deviceId}/${name}`;\n\t\treturn this.post({ uri, auth, headers, data: { args: argument }, context });\n\t}\n\n\t/**\n\t * Get a stream of events\n\t * @param {Object} options             Options for this API call\n\t * @param {String} [options.deviceId]  Device ID or Name, or `mine` to indicate only your devices.\n\t * @param {String} [options.name]      Event Name\n\t * @param {String} [options.org]       Organization Slug\n\t * @param {String} [options.product]   Events for this product ID or slug\n\t * @param {String} options.auth        Access Token\n\t * @returns {Promise} If the promise resolves, the resolution value will be an EventStream object that will\n\t * emit 'event' events.\n\t */\n\tgetEventStream({ deviceId, name, org, product, auth }){\n\t\tlet uri = '/v1/';\n\t\tif (org){\n\t\t\turi += `orgs/${org}/`;\n\t\t}\n\n\t\tif (product){\n\t\t\turi += `products/${product}/`;\n\t\t}\n\n\t\tif (deviceId){\n\t\t\turi += 'devices/';\n\t\t\tif (!(deviceId.toLowerCase() === 'mine')){\n\t\t\t\turi += `${deviceId}/`;\n\t\t\t}\n\t\t}\n\n\t\turi += 'events';\n\n\t\tif (name){\n\t\t\turi += `/${encodeURIComponent(name)}`;\n\t\t}\n\n\t\tauth = this._getActiveAuthToken(auth);\n\t\treturn new EventStream(`${this.baseUrl}${uri}`, auth).connect();\n\t}\n\n\t/**\n\t * Publish a event to the Particle Cloud\n\t * @param {Object} options             Options for this API call\n\t * @param {String} options.name        Event name\n\t * @param {String} options.data        Event data\n\t * @param {Boolean} options.isPrivate  Should the event be publicly available?\n\t * @param {String} [options.product]   Event for this product ID or slug\n\t * @param {String} options.auth        Access Token\n\t * @param {Object} [options.headers]   Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]   Request context\n\t * @returns {Promise} A promise\n\t */\n\tpublishEvent({ name, data, isPrivate, product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/events` : '/v1/devices/events';\n\t\tconst postData = { name, data, private: isPrivate };\n\t\treturn this.post({ uri, auth, headers, data: postData, context });\n\t}\n\n\t/**\n\t * Create a webhook\n\t * @param {Object} options                            Options for this API call\n\t * @param {String} options.event                      The name of the Particle event that should trigger the Webhook\n\t * @param {String} options.url                        The web address that will be targeted when the Webhook is triggered\n\t * @param {String} [options.device]                   Trigger Webhook only for this device ID or Name\n\t * @param {Boolean} [options.rejectUnauthorized]      Set to `false` to skip SSL certificate validation of the target URL\n\t * @param {Boolean} [options.noDefaults]              Don't include default event data in the webhook request\n\t * @param {Object} [options.hook]                     Webhook configuration settings\n\t * @param {String} [options.hook.method=POST]         Type of web request triggered by the Webhook (GET, POST, PUT, or DELETE)\n\t * @param {Object} [options.hook.auth]                Auth data like `{ username: 'me', password: '1234' }` to send via basic auth header with the Webhook request\n\t * @param {Object} [options.hook.headers]             Additional headers to add to the Webhook like `{ 'X-ONE': '1', X-TWO: '2' }`\n\t * @param {Object} [options.hook.query]               Query params to add to the Webhook request like `{ foo: 'foo', bar: 'bar' }`\n\t * @param {Object} [options.hook.json]                JSON data to send with the Webhook request - sets `Content-Type` to `application/json`\n\t * @param {Object} [options.hook.form]                Form data to send with the Webhook request - sets `Content-Type` to `application/x-www-form-urlencoded`\n\t * @param {String} [options.hook.body]                Custom body to send with the Webhook request\n\t * @param {Object} [options.hook.responseTemplate]    Template to use to customize the Webhook response body\n\t * @param {Object} [options.hook.responseEvent]       The Webhook response event name that your devices can subscribe to\n\t * @param {Object} [options.hook.errorResponseEvent]  The Webhook error response event name that your devices can subscribe to\n\t * @param {String} [options.product]                  Webhook for this product ID or slug\n\t * @param {String} options.auth                       Access Token\n\t * @param {Object} [options.headers]                  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]                  Request context\n\t * @returns {Promise} A promise\n\t */\n\tcreateWebhook({ event, url, device, rejectUnauthorized, noDefaults, hook, product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/webhooks` : '/v1/webhooks';\n\t\tconst data = { event, url, deviceId: device, rejectUnauthorized, noDefaults };\n\n\t\tif (hook){\n\t\t\tdata.requestType = hook.method;\n\t\t\tdata.auth = hook.auth;\n\t\t\tdata.headers = hook.headers;\n\t\t\tdata.query = hook.query;\n\t\t\tdata.json = hook.json;\n\t\t\tdata.form = hook.form;\n\t\t\tdata.body = hook.body;\n\t\t\tdata.responseTemplate = hook.responseTemplate;\n\t\t\tdata.responseTopic = hook.responseEvent;\n\t\t\tdata.errorResponseTopic = hook.errorResponseEvent;\n\t\t}\n\n\t\tif (!data.requestType){\n\t\t\tdata.requestType = 'POST';\n\t\t}\n\n\t\treturn this.post({ uri, auth, headers, data, context });\n\t}\n\n\t/**\n\t * Delete a webhook\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.hookId     Webhook ID\n\t * @param {String} [options.product]  Webhook for this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tdeleteWebhook({ hookId, product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/webhooks/${hookId}` : `/v1/webhooks/${hookId}`;\n\t\treturn this.delete({ uri, auth, headers, context });\n\t}\n\n\t/**\n\t * List all webhooks owned by the account or product\n\t * @param {Object} options            Options for this API call\n\t * @param {String} [options.product]  Webhooks for this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tlistWebhooks({ product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/webhooks` : '/v1/webhooks';\n\t\treturn this.get({ uri, auth, headers, context });\n\t}\n\n\t/**\n\t * Create an integration to send events to an external service\n     *\n\t * See the API docs for details https://docs.particle.io/reference/api/#integrations-webhooks-\n\t *\n\t * @param {Object} options             Options for this API call\n\t * @param {String} options.event       Event that triggers the integration\n\t * @param {Object} options.settings    Settings specific to that integration type\n\t * @param {String} [options.deviceId]  Trigger integration only for this device ID or Name\n\t * @param {String} [options.product]   Integration for this product ID or slug\n\t * @param {String} options.auth        Access Token\n\t * @param {Object} [options.headers]   Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tcreateIntegration({ event, settings, deviceId, product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/integrations` : '/v1/integrations';\n\t\tconst data = Object.assign({ event, deviceid: deviceId }, settings);\n\t\treturn this.post({ uri, data, auth, headers, context });\n\t}\n\n\t/**\n\t * Edit an integration to send events to an external service\n\t *\n\t * See the API docs for details https://docs.particle.io/reference/api/#integrations-webhooks-\n\t *\n\t * @param {Object} options                Options for this API call\n\t * @param {String} options.integrationId  The integration to edit\n\t * @param {String} [options.event]        Change the event that triggers the integration\n\t * @param {Object} [options.settings]     Change the settings specific to that integration type\n\t * @param {String} [options.deviceId]     Trigger integration only for this device ID or Name\n\t * @param {String} [options.product]      Integration for this product ID or slug\n\t * @param {String} options.auth           Access Token\n\t * @param {Object} [options.headers]      Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]      Request context\n\t * @returns {Promise} A promise\n\t */\n\teditIntegration({ integrationId, event, settings, deviceId, product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/integrations/${integrationId}` : `/v1/integrations/${integrationId}`;\n\t\tconst data = Object.assign({ event, deviceid: deviceId }, settings);\n\t\treturn this.put({ uri, auth, headers, data, context });\n\t}\n\n\t/**\n\t * Delete an integration to send events to an external service\n\t *\n\t * @param {Object} options                Options for this API call\n\t * @param {String} options.integrationId  The integration to remove\n\t * @param {String} [options.product]      Integration for this product ID or slug\n\t * @param {String} options.auth           Access Token\n\t * @param {Object} [options.headers]      Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]      Request context\n\t * @returns {Promise} A promise\n\t */\n\tdeleteIntegration({ integrationId, product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/integrations/${integrationId}` : `/v1/integrations/${integrationId}`;\n\t\treturn this.delete({ uri, auth, headers, context });\n\t}\n\n\t/**\n\t * List all integrations owned by the account or product\n\t * @param {Object} options            Options for this API call\n\t * @param {String} [options.product]  Integrations for this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tlistIntegrations({ product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/integrations` : '/v1/integrations';\n\t\treturn this.get({ uri, auth, headers, context });\n\t}\n\n\t/**\n\t * Get details about the current user\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tgetUserInfo({ auth, headers, context }){\n\t\treturn this.get({ uri: '/v1/user', auth, headers, context });\n\t}\n\n\t/**\n\t * Set details on the current user\n\t * @param {Object} options              Options for this API call\n\t * @param {String} options.auth         Access Token\n\t * @param {String} options.accountInfo  Set user's extended info fields (name, business account, company name, etc)\n\t * @param {Object} [options.headers]    Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]    Request context\n\t * @returns {Promise} A promise\n\t */\n\tsetUserInfo({ accountInfo, auth, headers, context }){\n\t\tconst data = { account_info: accountInfo };\n\t\treturn this.put({ uri: '/v1/user', auth, headers, data, context });\n\t}\n\n\t/**\n\t * Change username (i.e, email)\n\t * @param {Object} options                  Options for this API call\n\t * @param {String} options.auth             Access Token\n\t * @param {String} options.currentPassword  Current password\n\t * @param {String} options.username         New email\n\t * @param {Boolean} options.invalidateTokens Should all tokens be invalidated\n\t * @param {Object} [options.headers]        Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]        Request context\n\t * @returns {Promise} A promise\n\t */\n\tchangeUsername({ currentPassword, username, invalidateTokens = false, auth, headers, context }){\n\t\tconst data = { username, current_password: currentPassword };\n\n\t\tif (invalidateTokens) {\n\t\t\tdata.invalidate_tokens = true;\n\t\t}\n\n\t\treturn this.put({ uri: '/v1/user', auth, headers, data, context });\n\t}\n\n\t/**\n\t * Change user's password\n\t * @param {Object} options                   Options for this API call\n\t * @param {String} options.auth              Access Token\n\t * @param {String} options.currentPassword   Current password\n\t * @param {String} options.password          New password\n\t * @param {Boolean} options.invalidateTokens Should all tokens be invalidated\n\t * @param {Object} [options.headers]         Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]         Request context\n\t * @returns {Promise} A promise\n\t */\n\tchangeUserPassword({ currentPassword, password, invalidateTokens = false, auth, headers, context }){\n\t\tconst data = { password, current_password: currentPassword };\n\n\t\tif (invalidateTokens) {\n\t\t\tdata.invalidate_tokens = true;\n\t\t}\n\n\t\treturn this.put({ uri: '/v1/user', auth, headers, data, context });\n\t}\n\n\t/**\n\t * List SIM cards owned by a user or product\n\t * @param {Object} options               Options for this API call\n\t * @param {String} [options.iccid]       (Product only) Filter to SIM cards matching this ICCID\n\t * @param {String} [options.deviceId]    (Product only) Filter to SIM cards matching this device ID\n\t * @param {String} [options.deviceName]  (Product only) Filter to SIM cards matching this device name\n\t * @param {Number} [options.page]        (Product only) Current page of results\n\t * @param {Number} [options.perPage]     (Product only) Records per page\n\t * @param {String} [options.product]     SIM cards for this product ID or slug\n\t * @param {String} options.auth          Access Token\n\t * @param {Object} [options.headers]     Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]     Request context\n\t * @returns {Promise} A promise\n\t */\n\tlistSIMs({ iccid, deviceId, deviceName, page, perPage, product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/sims` : '/v1/sims';\n\t\tconst query = product ? { iccid, deviceId, deviceName, page, per_page: perPage } : undefined;\n\t\treturn this.get({ uri, auth, headers, query, context });\n\t}\n\n\t/**\n\t * Get data usage for one SIM card for the current billing period\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.iccid      ICCID of the SIM card\n\t * @param {String} [options.product]  SIM card for this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tgetSIMDataUsage({ iccid, product, auth, headers, context }){\n\t\tconst uri = product ?\n\t\t\t`/v1/products/${product}/sims/${iccid}/data_usage` :\n\t\t\t`/v1/sims/${iccid}/data_usage`;\n\n\t\treturn this.get({ uri, auth, headers, context });\n\t}\n\n\t/**\n\t * Get data usage for all SIM cards in a product the current billing period\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.product    SIM cards for this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tgetFleetDataUsage({ product, auth, headers, context }){\n\t\treturn this.get({\n\t\t\turi: `/v1/products/${product}/sims/data_usage`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Check SIM status\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.iccid      ICCID of the SIM card\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tcheckSIM({ iccid, auth, headers, context }){\n\t\treturn this.head({ uri: `/v1/sims/${iccid}`, auth, headers, context });\n\t}\n\n\t/**\n\t * Activate and add SIM cards to an account or product\n\t * @param {Object} options                Options for this API call\n\t * @param {String} options.iccid          ICCID of the SIM card\n\t * @param {Array<String>} options.iccids  (Product only) ICCID of multiple SIM cards to import\n\t * @param {String} options.country        The ISO country code for the SIM cards\n\t * @param {String} [options.product]      SIM cards for this product ID or slug\n\t * @param {String} options.auth           Access Token\n\t * @param {Object} [options.headers]      Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]      Request context\n\t * @param {any} [options.promoCode]\n\t * @returns {Promise} A promise\n\t */\n\tactivateSIM({ iccid, iccids, country, promoCode, product, auth, headers, context }){\n\t\t// promoCode is deprecated\n\t\ticcids = iccids || [iccid];\n\t\tconst uri = product ? `/v1/products/${product}/sims` : `/v1/sims/${iccid}`;\n\t\tconst data = product ?\n\t\t\t{ sims: iccids, country } :\n\t\t\t{ country, promoCode, action: 'activate' };\n\t\tconst method = product ? 'post' : 'put';\n\n\t\treturn this.request({ uri, method, headers, data, auth, context });\n\t}\n\n\t/**\n\t * Deactivate a SIM card so it doesn't incur data usage in future months.\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.iccid      ICCID of the SIM card\n\t * @param {String} [options.product]  SIM cards for this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tdeactivateSIM({ iccid, product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/sims/${iccid}` : `/v1/sims/${iccid}`;\n\t\tconst data = { action: 'deactivate' };\n\t\treturn this.put({ uri, auth, headers, data, context });\n\t}\n\n\t/**\n\t * Reactivate a SIM card the was deactivated or unpause a SIM card that was automatically paused\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.iccid      ICCID of the SIM card\n\t * @param {Number} [options.mbLimit]  New monthly data limit. Necessary if unpausing a SIM card\n\t * @param {String} [options.product]  SIM cards for this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\treactivateSIM({ iccid, mbLimit, product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/sims/${iccid}` : `/v1/sims/${iccid}`;\n\t\tconst data = { mb_limit: mbLimit, action: 'reactivate' };\n\t\treturn this.put({ uri, auth, headers, data, context });\n\t}\n\n\t/**\n\t * Update SIM card data limit\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.iccid      ICCID of the SIM card\n\t * @param {Array}  options.mbLimit    Data limit in megabyte for the SIM card\n\t * @param {String} [options.product]  SIM cards for this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tupdateSIM({ iccid, mbLimit, product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/sims/${iccid}` : `/v1/sims/${iccid}`;\n\t\tconst data = { mb_limit: mbLimit };\n\t\treturn this.put({ uri, auth, headers, data, context });\n\t}\n\n\t/**\n\t * Remove a SIM card from an account so it can be activated by a different account\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.iccid      ICCID of the SIM card\n\t * @param {String} [options.product]  SIM cards for this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tremoveSIM({ iccid, product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/sims/${iccid}` : `/v1/sims/${iccid}`;\n\t\treturn this.delete({ uri, auth, headers, context });\n\t}\n\n\t/**\n\t * List valid build targets to be used for compiling\n\t * @param {Object} options                        Options for this API call\n\t * @param {Boolean} [options.onlyFeatured=false]  Only list featured build targets\n\t * @param {String} options.auth                   Access Token\n\t * @param {Object} [options.headers]              Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]              Request context\n\t * @returns {Promise} A promise\n\t */\n\tlistBuildTargets({ onlyFeatured, auth, headers, context }){\n\t\tconst query = onlyFeatured ? { featured: !!onlyFeatured } : undefined;\n\t\treturn this.get({ uri: '/v1/build_targets', auth, headers, query, context });\n\t}\n\n\t/**\n\t * List firmware libraries\n\t * @param  {Object} options Options for this API call\n\t * @param  {Number} options.page Page index (default, first page)\n\t * @param  {Number} options.limit Number of items per page\n\t * @param  {String} options.filter Search term for the libraries\n\t * @param  {String} options.sort Ordering key for the library list\n\t * @param  {Array<String>}  options.architectures List of architectures to filter\n\t * @param  {String} options.category Category to filter\n\t * @param  {String} options.scope The library scope to list. Default is 'all'. Other values are\n\t * - 'all' - list public libraries and my private libraries\n\t * - 'public' - list only public libraries\n\t * - 'private' - list only my private libraries\n\t * - 'mine' - list my libraries (public and private)\n\t * - 'official' - list only official libraries\n\t * - 'verified' - list only verified libraries\n\t * - 'featured' - list only featured libraries\n\t * @param  {String} options.excludeScopes  list of scopes to exclude\n\t * @param  {String} options.category Category to filter\n\t * @param  {String} options.auth Access Token\n\t * @param {Object} [options.headers]              Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]              Request context\n\t * @returns {Promise} A promise\n\t */\n\tlistLibraries({ page, limit, filter, sort, architectures, category, scope, excludeScopes, auth, headers, context }){\n\t\treturn this.get({\n\t\t\turi: '/v1/libraries',\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tquery: {\n\t\t\t\tpage,\n\t\t\t\tfilter,\n\t\t\t\tlimit,\n\t\t\t\tsort,\n\t\t\t\tarchitectures: this._asList(architectures),\n\t\t\t\tcategory,\n\t\t\t\tscope,\n\t\t\t\texcludeScopes: this._asList(excludeScopes)\n\t\t\t},\n\t\t\tcontext\n\t\t});\n\t}\n\n\t_asList(value){\n\t\treturn (Array.isArray(value) ? value.join(',') : value);\n\t}\n\n\t/**\n\t * Get firmware library details\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.name       Name of the library to fetch\n\t * @param {String} options.version    Version of the library to fetch (default: latest)\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tgetLibrary({ name, version, auth, headers, context }){\n\t\treturn this.get({\n\t\t\turi: `/v1/libraries/${name}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tquery: { version },\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Firmware library details for each version\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.name       Name of the library to fetch\n\t * @param {Number} options.page       Page index (default, first page)\n\t * @param {Number} options.limit      Number of items per page\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tgetLibraryVersions({ name, page, limit, auth, headers, context }){\n\t\treturn this.get({\n\t\t\turi: `/v1/libraries/${name}/versions`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tquery: { page, limit },\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Contribute a new library version from a compressed archive\n\t * @param {Object} options            Options for this API call\n\t * @param {String|Buffer} options.archive    Compressed archive file containing the library sources\n\t *                                    Either a path or Buffer of the file contents in Node, or a File or Blob in the browser.\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tcontributeLibrary({ archive, auth, headers, context }){\n\t\tconst files = {\n\t\t\t'archive.tar.gz': archive\n\t\t};\n\n\t\treturn this.request({\n\t\t\turi: '/v1/libraries',\n\t\t\tmethod: 'post',\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tfiles,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Publish the latest version of a library to the public\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.name       Name of the library to publish\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tpublishLibrary({ name, auth, headers, context }){\n\t\treturn this.request({\n\t\t\turi: `/v1/libraries/${name}`,\n\t\t\tmethod: 'patch',\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tdata: { visibility: 'public' },\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Delete one version of a library or an entire private library\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.name       Name of the library to remove\n\t * @param {String} options.force      Key to force deleting a public library\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tdeleteLibrary({ name, force, auth, headers, context }){\n\t\treturn this.delete({\n\t\t\turi: `/v1/libraries/${name}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tdata: { force },\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Download an external file that may not be on the API\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.uri        URL of the file.\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} Resolves to a buffer with the file data\n\t */\n\tdownloadFile({ uri, headers, context }){\n\t\treturn this.request({ uri, method: 'get', headers, context, isBuffer: true });\n\t}\n\n\t/**\n\t * List OAuth client created by the account\n\t * @param {Object} options            Options for this API call\n\t * @param {String} [options.product]  List clients for this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tlistOAuthClients({ product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/clients` : '/v1/clients';\n\t\treturn this.get({ uri, auth, headers, context });\n\t}\n\n\t/**\n\t * Create an OAuth client\n\t * @param {Object} options                 Options for this API call\n\t * @param {String} options.name            Name of the OAuth client\n\t * @param {String} options.type            web, installed or web\n\t * @param {String} [options.redirect_uri]  URL to redirect after OAuth flow. Only for type web.\n\t * @param {Object} [options.scope]         Limits what the access tokens created by this client can do.\n\t * @param {String} [options.product]       Create client for this product ID or slug\n\t * @param {String} options.auth            Access Token\n\t * @param {Object} [options.headers]       Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]       Request context\n\t * @returns {Promise} A promise\n\t */\n\tcreateOAuthClient({ name, type, redirect_uri, scope, product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/clients` : '/v1/clients';\n\t\tconst data = { name, type, redirect_uri, scope };\n\t\treturn this.post({ uri, auth, headers, data, context });\n\t}\n\n\t/**\n\t * Update an OAuth client\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.clientId   The OAuth client to update\n\t * @param {String} [options.name]     New Name of the OAuth client\n\t * @param {Object} [options.scope]    New scope of the OAuth client\n\t * @param {String} [options.product]  Update client linked to this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tupdateOAuthClient({ clientId, name, scope, product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/clients/${clientId}` : `/v1/clients/${clientId}`;\n\t\tconst data = { name, scope };\n\t\treturn this.put({ uri, data, auth, headers, context });\n\t}\n\n\t/**\n\t * Delete an OAuth client\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.clientId   The OAuth client to update\n\t * @param {String} [options.product]  OAuth client linked to this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tdeleteOAuthClient({ clientId, product, auth, headers, context }){\n\t\tconst uri = product ? `/v1/products/${product}/clients/${clientId}` : `/v1/clients/${clientId}`;\n\t\treturn this.delete({ uri, auth, headers, context });\n\t}\n\n\t/**\n\t * List products the account has access to\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tlistProducts({ auth, headers, context }){\n\t\treturn this.get({ uri: '/v1/products', auth, headers, context });\n\t}\n\n\t/**\n\t * Get detailed information about a product\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.product    Product ID or slug\n\t * @param {String} options.auth       Access token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tgetProduct({ product, auth, headers, context }){\n\t\treturn this.get({ uri: `/v1/products/${product}`, auth, headers, context });\n\t}\n\n\t/**\n\t * List product firmware versions\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.product    Firmware for this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tlistProductFirmware({ product, auth, headers, context }){\n\t\treturn this.get({ uri: `/v1/products/${product}/firmware`, auth, headers, context });\n\t}\n\n\t/**\n\t * List product firmware versions\n\t * @param {Object} options                Options for this API call\n\t * @param {Object} options.file           Path or Buffer of the new firmware file\n\t *                                        Either a path or Buffer of the file contents in Node, or a File or Blob in the browser.\n\t * @param {Number} options.version        Version number of new firmware\n\t * @param {String} options.title          Short identifier for the new firmware\n\t * @param {String} [options.description]  Longer description for the new firmware\n\t * @param {String} options.product        Firmware for this product ID or slug\n\t * @param {String} options.auth           Access Token\n\t * @param {Object} [options.headers]      Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]      Request context\n\t * @returns {Promise} A promise\n\t */\n\tuploadProductFirmware({ file, version, title, description, product, auth, headers, context }){\n\t\treturn this.request({\n\t\t\turi: `/v1/products/${product}/firmware`,\n\t\t\tmethod: 'post',\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tform: {\n\t\t\t\tversion,\n\t\t\t\ttitle,\n\t\t\t\tdescription\n\t\t\t},\n\t\t\tfiles: {\n\t\t\t\t'firmware.bin': file\n\t\t\t},\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Get information about a product firmware version\n\t * @param {Object} options            Options for this API call\n\t * @param {Number} options.version    Version number of firmware\n\t * @param {String} options.product    Firmware for this product ID or slug\n\t * @param {String} options.auth       Access token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tgetProductFirmware({ version, product, auth, headers, context }){\n\t\treturn this.get({\n\t\t\turi: `/v1/products/${product}/firmware/${version}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Update information for a product firmware version\n\t * @param {Object} options                Options for this API call\n\t * @param {Number} options.version        Version number of new firmware\n\t * @param {String} [options.title]        New title\n\t * @param {String} [options.description]  New description\n\t * @param {String} options.product        Firmware for this product ID or slug\n\t * @param {String} options.auth           Access Token\n\t * @param {Object} [options.headers]      Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]      Request context\n\t * @returns {Promise} A promise\n\t */\n\tupdateProductFirmware({ version, title, description, product, auth, headers, context }){\n\t\tconst uri = `/v1/products/${product}/firmware/${version}`;\n\t\treturn this.put({ uri, auth, headers, data: { title, description }, context });\n\t}\n\n\t/**\n\t * Download a product firmware binary\n\t * @param {Object} options            Options for this API call\n\t * @param {Number} options.version    Version number of new firmware\n\t * @param {String} options.product    Firmware for this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise<RequestResponse, RequestError>} A promise that resolves with either the requested data or an error object\n\t */\n\tdownloadProductFirmware({ version, product, auth, headers, context }){\n\t\treturn this.request({\n\t\t\turi: `/v1/products/${product}/firmware/${version}/binary`,\n\t\t\tmethod: 'get',\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext,\n\t\t\tisBuffer: true\n\t\t});\n\t}\n\n\t/**\n\t * Release a product firmware version as the default version\n\t * @param {Object} options            Options for this API call\n\t * @param {Number} options.version    Version number of new firmware\n\t * @param {String} options.product    Firmware for this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\treleaseProductFirmware({ version, product, auth, headers, context }){\n\t\tconst uri = `/v1/products/${product}/firmware/release`;\n\t\treturn this.put({ uri, auth, headers, data: { version }, context });\n\t}\n\n\t/**\n\t * List product team members\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.product    Team for this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tlistTeamMembers({ product, auth, headers, context }){\n\t\treturn this.get({\n\t\t\turi: `/v1/products/${product}/team`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Invite Particle user to a product team\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.username   Username for the Particle account\n\t * @param {String} options.product    Team for this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tinviteTeamMember({ username, product, auth, headers, context }){\n\t\treturn this.post({\n\t\t\turi: `/v1/products/${product}/team`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tdata: { username },\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Remove Particle user to a product team\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.username   Username for the Particle account\n\t * @param {String} options.product    Team for this product ID or slug\n\t * @param {String} options.auth       Access Token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tremoveTeamMember({ username, product, auth, headers, context }){\n\t\treturn this.delete({\n\t\t\turi: `/v1/products/${product}/team/${username}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Fetch details about a serial number\n\t * @param {Object} options               Options for this API call\n\t * @param {String} options.serialNumber  The serial number printed on the barcode of the device packaging\n\t * @param {String} options.auth          Access Token\n\t * @param {Object} [options.headers]     Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]     Request context\n\t * @returns {Promise} A promise\n\t */\n\tlookupSerialNumber({ serialNumber, auth, headers, context }){\n\t\treturn this.get({\n\t\t\turi: `/v1/serial_numbers/${serialNumber}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Create a mesh network\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.name       Network name\n\t * @param {String} options.deviceId   Gateway device ID\n\t * @param {String} [options.iccid]    ICCID of the active SIM card (only for cellular gateway devices)\n\t * @param {String} options.auth       Access token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise<Object>} A promise\n\t */\n\tcreateMeshNetwork({ name, deviceId, iccid, auth, headers, context }){\n\t\treturn this.post({\n\t\t\turi: '/v1/networks',\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tdata: { name, device_id: deviceId, iccid },\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Remove a mesh network.\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.networkId  Network ID or name\n\t * @param {String} options.auth       Access token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise<Object>} A promise\n\t */\n\tremoveMeshNetwork({ networkId, auth, headers, context }){\n\t\treturn this.delete({ uri: `/v1/networks/${networkId}`, auth, headers, context });\n\t}\n\n\t/**\n\t * List all mesh networks\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.auth       Access token\n\t * @param {Number} [options.page]     Current page of results\n\t * @param {Number} [options.perPage]  Records per page\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise<Object>} A promise\n\t */\n\tlistMeshNetworks({ page, perPage, auth, headers, context }){\n\t\tconst query = page ? { page, per_page: perPage } : undefined;\n\t\treturn this.get({ uri: '/v1/networks', auth, headers, query, context });\n\t}\n\n\t/**\n\t * Get information about a mesh network.\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.networkId  Network ID or name\n\t * @param {String} options.auth       Access token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise<Object>} A promise\n\t */\n\tgetMeshNetwork({ networkId, auth, headers, context }){\n\t\treturn this.get({ uri: `/v1/networks/${networkId}`, auth, headers, context });\n\t}\n\n\t/**\n\t * Modify a mesh network.\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.networkId  Network ID or name\n\t * @param {String} options.action     'add-device', 'remove-device', 'gateway-enable' or 'gateway-disable'\n\t * @param {String} options.deviceId   Device ID\n\t * @param {String} options.auth       Access token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise<Object>} A promise\n\t */\n\tupdateMeshNetwork({ networkId, action, deviceId, auth, headers, context }){\n\t\treturn this.put({\n\t\t\turi: `/v1/networks/${networkId}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tdata: { action, device_id: deviceId },\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Add a device to a mesh network.\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.networkId  Network ID or name\n\t * @param {String} options.deviceId   Device ID\n\t * @param {String} options.auth       Access token\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise<Object>} A promise\n\t */\n\taddMeshNetworkDevice({ networkId, deviceId, auth, headers, context }){\n\t\treturn this.updateMeshNetwork({\n\t\t\taction: 'add-device',\n\t\t\tnetworkId,\n\t\t\tdeviceId,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Remove a device from a mesh network.\n\t * @param {Object} options              Options for this API call\n\t * @param {String} [options.networkId]  Network ID or name\n\t * @param {String} options.deviceId     Device ID\n\t * @param {String} options.auth         Access token\n\t * @param {Object} [options.headers]    Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]    Request context\n\t * @returns {Promise<Object>} A promise\n\t */\n\tremoveMeshNetworkDevice({ networkId, deviceId, auth, headers, context }){\n\t\tif (!networkId){\n\t\t\treturn this.delete({\n\t\t\t\turi: `/v1/devices/${deviceId}/network`,\n\t\t\t\tauth,\n\t\t\t\theaders, context\n\t\t\t});\n\t\t}\n\t\treturn this.updateMeshNetwork({\n\t\t\taction: 'remove-device',\n\t\t\tnetworkId,\n\t\t\tdeviceId,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * List all devices of a mesh network.\n\t * @param {Object} options            Options for this API call\n\t * @param {String} options.networkId  Network ID or name\n\t * @param {String} options.auth       Access token\n\t * @param {Number} [options.role]     Device role: 'gateway' or 'node'\n\t * @param {Number} [options.page]     Current page of results\n\t * @param {Number} [options.perPage]  Records per page\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise<Object>} A promise\n\t */\n\tlistMeshNetworkDevices({ networkId, role, page, perPage, auth, headers, context }){\n\t\tconst query = (role || page) ? { role, page, per_page: perPage } : undefined;\n\t\treturn this.get({\n\t\t\turi: `/v1/networks/${networkId}/devices`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tquery,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Get product configuration\n\t * @param  {Object} options          Options for this API call\n\t * @param  {String} options.product  Config for this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context\n\t * @returns {Promise} A promise\n\t */\n\tgetProductConfiguration({ auth, product, headers, context }){\n\t\treturn this.get({\n\t\t\turi: `/v1/products/${product}/config`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Get product configuration schema\n\t * @param  {Object} options          Options for this API call\n\t * @param  {String} options.product  Config for this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context\n\t * @returns {Promise} A promise\n\t */\n\tgetProductConfigurationSchema({ auth, product, headers = {}, context }){\n\t\theaders.accept = 'application/schema+json';\n\t\treturn this.get({\n\t\t\turi: `/v1/products/${product}/config`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Get product device's configuration\n\t * @param  {Object} options          Options for this API call\n\t * @param  {String} options.product  Config for this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @param  {String} options.deviceId Device ID to access\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context\n\t * @returns {Promise} A promise\n\t */\n\tgetProductDeviceConfiguration({ auth, product, deviceId, headers, context }){\n\t\treturn this.get({\n\t\t\turi: `/v1/products/${product}/config/${deviceId}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Get product device's configuration schema\n\t * @param  {Object} options          Options for this API call\n\t * @param  {String} options.product  Config for this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @param  {String} options.deviceId Device ID to access\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context\n\t * @returns {Promise} A promise\n\t */\n\tgetProductDeviceConfigurationSchema({ auth, product, deviceId, headers, context }){\n\t\theaders.accept = 'application/schema+json';\n\t\treturn this.get({\n\t\t\turi: `/v1/products/${product}/config/${deviceId}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Set product configuration\n\t * @param {Object} options          Options for this API call\n\t * @param {String} options.product  Config for this product ID or slug\n\t * @param {String} options.auth     Access Token\n\t * @param {Object} options.config   Product configuration to update\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context\n\t * @returns {Promise} A promise\n\t */\n\tsetProductConfiguration({ auth, product, config, headers, context }){\n\t\treturn this.put({\n\t\t\turi: `/v1/products/${product}/config`,\n\t\t\tauth,\n\t\t\tdata: config,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Set product configuration for a specific device within the product\n\t * @param  {Object} options          Options for this API call\n\t * @param  {String} options.product  Config for this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @param  {Object} options.config   Product configuration to update\n\t * @param  {String} options.deviceId Device ID to access\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context\n\t * @returns {Promise} A promise\n\t */\n\tsetProductDeviceConfiguration({ auth, product, deviceId, config, headers, context }){\n\t\treturn this.put({\n\t\t\turi: `/v1/products/${product}/config/${deviceId}`,\n\t\t\tdata: config,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Query location for devices within a product\n\t * @param  {Object} options            Options for this API call\n\t * @param  {String} options.product    Locations for this product ID or slug\n\t * @param  {String} options.auth       Access Token\n\t * @param  {String} options.dateRange  Start and end date in ISO8601 format, separated by comma, to query\n\t * @param  {String} options.rectBl     Bottom left of the rectangular bounding box to query. Latitude and longitude separated by comma\n\t * @param  {String} options.rectTr     Top right of the rectangular bounding box to query. Latitude and longitude separated by comma\n\t * @param  {String} options.deviceId   Device ID prefix to include in the query\n\t * @param  {String} options.deviceName Device name prefix to include in the query\n\t * @param  {String} options.groups     Array of group names to include in the query\n\t * @param  {String} options.page       Page of results to display. Defaults to 1\n\t * @param  {String} options.perPage    Number of results per page. Defaults to 20. Maximum of 100\n\t * @param {Object} [options.headers]   Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]   Request context\n\t * @returns {Promise} A promise\n\t */\n\tgetProductLocations({ auth, product, dateRange, rectBl, rectTr, deviceId, deviceName, groups, page, perPage, headers, context }){\n\t\treturn this.get({\n\t\t\turi: `/v1/products/${product}/locations`,\n\t\t\tquery: {\n\t\t\t\tdate_range: dateRange,\n\t\t\t\trect_bl: rectBl,\n\t\t\t\trect_tr: rectTr,\n\t\t\t\tdevice_id: deviceId,\n\t\t\t\tdevice_name: deviceName,\n\t\t\t\tgroups,\n\t\t\t\tpage,\n\t\t\t\tper_page: perPage\n\t\t\t},\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Query location for one device within a product\n\t * @param  {Object} options           Options for this API call\n\t * @param  {String} options.product   Locations for this product ID or slug\n\t * @param  {String} options.auth      Access Token\n\t * @param  {String} options.dateRange Start and end date in ISO8601 format, separated by comma, to query\n\t * @param  {String} options.rectBl    Bottom left of the rectangular bounding box to query. Latitude and longitude separated by comma\n\t * @param  {String} options.rectTr    Top right of the rectangular bounding box to query. Latitude and longitude separated by comma\n\t * @param  {String} options.deviceId  Device ID to query\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @param {Object} [options.headers]  Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context]  Request context\n\t * @returns {Promise} A promise\n\t */\n\tgetProductDeviceLocations({ auth, product, dateRange, rectBl, rectTr, deviceId, headers, context }){\n\t\treturn this.get({\n\t\t\turi: `/v1/products/${product}/locations/${deviceId}`,\n\t\t\tquery: {\n\t\t\t\tdate_range: dateRange,\n\t\t\t\trect_bl: rectBl,\n\t\t\t\trect_tr: rectTr\n\t\t\t},\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Creates a new logic block in the specified organization using the provided block data.\n\t *\n\t * When you create a logic block with PubSub matchers, events will immediately\n\t * start being handled by the block code.\n\t *\n\t * When you create a Chron matcher, it will immediately be scheduled at the next time\n\t * according to the cron and start_at properties.\n\t *\n\t * @param {Object} options         The options for creating the logic block.\n\t * @param {Object} options.auth    Access token\n\t * @param {string} options.org     The name of the organization.\n\t * @param {string}  options.block   The block object containing the block details.\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to the created logic block data.\n\t */\n\tcreateLogicBlock({ auth, org, block, headers, context }) {\n\t\treturn this.post({\n\t\t\turi: `/v1/orgs/${org}/blocks`,\n\t\t\tauth,\n\t\t\tdata: { block },\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Get a logic block in the specified organization by block ID.\n\t *\n\t * @param {Object} options         The options for the logic block.\n\t * @param {Object} options.auth    Access token\n\t * @param {string} options.org     The name of the organization.\n\t * @param {string} options.blockId The ID of the block to retrieve.\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to the specified logic block data.\n\t */\n\tgetLogicBlock({ auth, org, blockId, headers, context }) {\n\t\treturn this.get({\n\t\t\turi: `/v1/orgs/${org}/blocks/${blockId}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Updates an existing logic block in the specified organization using the provided block data.\n\t *\n\t * If you include an id on a matcher, it will update the matcher in place.\n\t *\n\t * @param {Object} options          The options for updating the logic block.\n\t * @param {Object} options.auth     The authentication object with the API key.\n\t * @param {string} options.org      The unique identifier of the organization.\n\t * @param {string} options.blockId  The ID of the block to update.\n\t * @param {string} options.block     The block object containing the block details.\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context.\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to the updated logic block data.\n\t */\n\tupdateLogicBlock({ auth, org, blockId, block, headers, context }) {\n\t\treturn this.put({\n\t\t\turi: `/v1/orgs/${org}/blocks/${blockId}`,\n\t\t\tauth,\n\t\t\tdata: { block },\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Deletes a logic block in the specified organization by block ID.\n\t *\n\t * @param {Object} options          The options for deleting the logic block.\n\t * @param {Object} options.auth     The authentication object with the API key.\n\t * @param {string} options.org      The unique identifier of the organization.\n\t * @param {string} options.blockId  The ID of the block to delete.\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context.\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to an object containing the deleted block ID.\n\t */\n\tdeleteLogicBlock({ auth, org, blockId, headers, context }) {\n\t\treturn this.delete({\n\t\t\turi: `/v1/orgs/${org}/blocks/${blockId}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Lists all logic blocks in the specified organization.\n\t *\n\t * @param {Object} options          The options for listing logic blocks.\n\t * @param {Object} options.auth     The authentication object with the API key.\n\t * @param {string} options.org      The unique identifier of the organization.\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context.\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to an array of logic block data.\n\t */\n\tlistLogicBlocks({ auth, org, headers, context }) {\n\t\treturn this.get({\n\t\t\turi: `/v1/orgs/${org}/blocks`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Lists all block runs for the specified block.\n\t *\n\t * @param {Object} options          The options for the request.\n\t * @param {Object} options.auth     Access token\n\t * @param {string} options.org      The unique identifier of the organization.\n\t * @param {number} options.blockId  The ID of the block for which to retrieve the block runs.\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to an array of block run data.\n\t */\n\tlistBlockRuns({ auth, org, blockId, headers, context }) {\n\t\treturn this.get({\n\t\t\turi: `/v1/orgs/${org}/blocks/${blockId}/runs`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves a block run by its ID for the specified block.\n\t *\n\t * @param {Object} options          The options for the request.\n\t * @param {Object} options.auth     Access token\n\t * @param {string} options.org      The unique identifier of the organization.\n\t * @param {number} options.blockId  The ID of the block for which to retrieve the block run.\n\t * @param {number} options.runId    The ID of the block run to retrieve.\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to an array of block run data for the specified block run ID.\n\t */\n\tgetBlockRun({ auth, org, blockId, runId, headers, context }) {\n\t\treturn this.get({\n\t\t\turi: `/v1/orgs/${org}/blocks/${blockId}/runs/${runId}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves the logs for a block run by its ID for the specified block.\n\t *\n\t * @param {Object} options          The options for the request.\n\t * @param {Object} options.auth     Access token\n\t * @param {string} options.org      The unique identifier of the organization.\n\t * @param {number} options.blockId  The ID of the block for which to retrieve the block run logs.\n\t * @param {number} options.runId    The ID of the block run for which to retrieve the logs.\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to the logs for the specified block run ID.\n\t */\n\tgetBlockRunLog({ auth, org, blockId, runId, headers, context }) {\n\t\treturn this.get({\n\t\t\turi: `/v1/orgs/${org}/blocks/${blockId}/runs/${runId}/logs`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Creates a new ledger definition in the specified organization.\n\t *\n\t * @param {Object} options         The options for creating the ledger definition.\n\t * @param {Object} options.auth    Access token\n\t * @param {string} options.org     The name of the organization.\n\t * @param {object} options.definition   The ledger definition object.\n\t * @param {object} options.ledger     The ledger definition object.\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to the created ledger definition data.\n\t */\n\tcreateLedger({ auth, org, ledger, headers, context }) {\n\t\treturn this.post({\n\t\t\turi: `/v1/orgs/${org}/ledgers`,\n\t\t\tauth,\n\t\t\tdata: { ledger },\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Get a ledger definition in the specified organization by ledger name.\n\t *\n\t * @param {Object} options         The options for the ledger definition.\n\t * @param {Object} options.auth    Access token\n\t * @param {string} options.org     The name of the organization.\n\t * @param {string} options.ledgerName The ID of the ledger definition to retrieve.\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to the specified ledger definition data.\n\t */\n\tgetLedger({ auth, org, ledgerName, headers, context }) {\n\t\treturn this.get({\n\t\t\turi: `/v1/orgs/${org}/ledgers/${ledgerName}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Updates an existing ledger definition in the specified organization.\n\t *\n\t * @param {Object} options          The options for updating the ledger definition.\n\t * @param {Object} options.auth     The authentication object with the API key.\n\t * @param {string} options.org      The unique identifier of the organization.\n\t * @param {string} options.ledgerName  Name of the ledger definition to update.\n\t * @param {object} options.ledger     The ledger definition object.\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context.\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to the updated ledger definition data.\n\t */\n\tupdateLedger({ auth, org, ledgerName, ledger, headers, context }) {\n\t\treturn this.put({\n\t\t\turi: `/v1/orgs/${org}/ledgers/${ledgerName}`,\n\t\t\tauth,\n\t\t\tdata: { ledger },\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Archives a ledger definition in the specified organization by ledger name.\n\t *\n\t * @param {Object} options          The options for archiving the ledger definition.\n\t * @param {Object} options.auth     The authentication object with the API key.\n\t * @param {string} options.org      The unique identifier of the organization.\n\t * @param {string} options.ledgerName  Name of the ledger definition to archive.\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context.\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to an object confirming the ledger definition was archived.\n\t */\n\tarchiveLedger({ auth, org, ledgerName, headers, context }) {\n\t\treturn this.delete({\n\t\t\turi: `/v1/orgs/${org}/ledgers/${ledgerName}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Lists all ledger definitions in the specified organization.\n\t *\n\t * @param {Object} options          The options for listing ledger definitions.\n\t * @param {Object} options.auth     The authentication object with the API key.\n\t * @param {string} options.org      The unique identifier of the organization.\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context.\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to an array of ledger definition data.\n\t */\n\tlistLedgers({ auth, org, headers, context }) {\n\t\treturn this.get({\n\t\t\turi: `/v1/orgs/${org}/ledgers`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Get ledger instance data.\n\t *\n\t * @param {Object} options         The options for the ledger instance.\n\t * @param {Object} options.auth    Access token\n\t * @param {string} options.org     The name of the organization.\n\t * @param {string} options.ledgerName Ledger name.\n\t * @param {string} options.scopeValue Scope value.\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to the specified ledger instance data.\n\t */\n\tgetLedgerInstance({ auth, org, ledgerName, scopeValue, headers, context }) {\n\t\treturn this.get({\n\t\t\turi: `/v1/orgs/${org}/ledgers/${ledgerName}/instances/${scopeValue}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Set ledger instance data.\n\t *\n\t * @param {Object} options          The options for updating the ledger instance.\n\t * @param {Object} options.auth     The authentication object with the API key.\n\t * @param {string} options.org      The unique identifier of the organization.\n\t * @param {string} options.ledgerName Ledger name.\n\t * @param {string} options.scopeValue Scope value.\n\t * @param {object} options.instance     The ledger instance object.\n\t * @param {object} options.data     The data to set to the instance\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context.\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to the updated ledger instance data.\n\t */\n\tsetLedgerInstance({ auth, org, ledgerName, scopeValue, data, headers, context }) {\n\t\treturn this.put({\n\t\t\turi: `/v1/orgs/${org}/ledgers/${ledgerName}/instances/${scopeValue}`,\n\t\t\tauth,\n\t\t\tdata: { data },\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Delete a ledger instance in the specified organization by ledger name.\n\t *\n\t * @param {Object} options          The options for archiving the ledger instance.\n\t * @param {Object} options.auth     The authentication object with the API key.\n\t * @param {string} options.org      The unique identifier of the organization.\n\t * @param {string} options.ledgerName  Name of the ledger instance to archive.\n\t * @param {string} options.scopeValue Scope value.\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context.\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to an object confirming the ledger instance was deleted.\n\t */\n\tdeleteLedgerInstance({ auth, org, ledgerName, scopeValue, headers, context }) {\n\t\treturn this.delete({\n\t\t\turi: `/v1/orgs/${org}/ledgers/${ledgerName}/instances/${scopeValue}`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Lists ledger instances.\n\t *\n\t * @param {Object} options          The options for listing ledger instances.\n\t * @param {Object} options.auth     The authentication object with the API key.\n\t * @param {string} options.org      The unique identifier of the organization.\n\t * @param {string} options.ledgerName  Name of the ledger instance to archive.\n\t * @param {Object} [options.headers] Key/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {Object} [options.context] Request context.\n\t *\n\t * @returns {Promise<RequestResponse>} A promise that resolves to an array of ledger instance data.\n\t */\n\tlistLedgerInstances({ auth, org, ledgerName, headers, context }) {\n\t\treturn this.get({\n\t\t\turi: `/v1/orgs/${org}/ledgers/${ledgerName}/instances`,\n\t\t\tauth,\n\t\t\theaders,\n\t\t\tcontext\n\t\t});\n\t}\n\n\t/**\n\t * Set default auth token that will be used in each method if `auth` is not provided\n\t * @param  {String} auth A Particle access token\n\t * @throws {Error} When not auth string is provided\n\t */\n\tsetDefaultAuth(auth){\n\t\tif (typeof auth === 'string' && auth.length !== 0) {\n\t\t\tthis._defaultAuth = auth;\n\t\t} else {\n\t\t\tthrow new Error('Must pass a non-empty string');\n\t\t}\n\t}\n\t/**\n\t * Return provided token if truthy else use default auth if truthy else undefined\n\t * @param {*} auth Optional auth token or undefined\n\t * @private\n\t * @returns {String|undefined} a Particle auth token or undefined\n\t */\n\t_getActiveAuthToken(auth) {\n\t\treturn auth || this._defaultAuth;\n\t}\n\t/**\n\t * API URI to access a device\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId  Device ID to access\n\t * @param  {String} [options.product] Device only in this product ID or slug\n\t * @private\n\t * @returns {string} URI\n\t */\n\tdeviceUri({ deviceId, product }){\n\t\treturn product ? `/v1/products/${product}/devices/${deviceId}` : `/v1/devices/${deviceId}`;\n\t}\n\n\t/**\n\t * Make a GET request\n\t * @param {object} params\n\t * @param {string} params.uri\t\tThe URI to request\n\t * @param {string|object} [params.auth]\tAuthorization token to use\n\t * @param {object} [params.headers]\tKey/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {string|object} [params.query] Key/VAlue pairs of query params or a correctly formatted string\n\t * @param {object} [params.context]\tThe invocation context, describing the tool and project\n\t * @returns {Promise<RequestResponse, RequestError>} A promise that resolves with either the requested data or an error object\n\t */\n\tget({ uri, auth, headers, query, context }){\n\t\tcontext = this._buildContext(context);\n\t\tauth = this._getActiveAuthToken(auth);\n\t\treturn this.agent.get({ uri, auth, headers, query, context });\n\t}\n\n\t/**\n\t * Make a HEAD request\n\t * @param {object} params\n\t * @param {string} params.uri\t\tThe URI to request\n\t * @param {string|object} [params.auth]\tAuthorization token to use\n\t * @param {object} [params.headers]\tKey/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {string|object} [params.query] Key/VAlue pairs of query params or a correctly formatted string\n\t * @param {object} [params.context]\tThe invocation context, describing the tool and project\n\t * @returns {Promise<RequestResponse, RequestError>} A promise that resolves with either the requested data or an error object\n\t */\n\thead({ uri, auth, headers, query, context }){\n\t\tcontext = this._buildContext(context);\n\t\tauth = this._getActiveAuthToken(auth);\n\t\treturn this.agent.head({ uri, auth, headers, query, context });\n\t}\n\n\t/**\n\t * Make a POST request\n\t * @param {object} params\n\t * @param {string} params.uri\t\tThe URI to request\n\t * @param {string|object} [params.auth]\tAuthorization token to use\n\t * @param {object} [params.headers]\tKey/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {string|object} [params.data] Key/VAlue pairs of query params or a correctly formatted string\n\t * @param {object} [params.context]\tThe invocation context, describing the tool and project\n\t * @returns {Promise<RequestResponse, RequestError>} A promise that resolves with either the requested data or an error object\n\t */\n\tpost({ uri, auth, headers, data, context }){\n\t\tcontext = this._buildContext(context);\n\t\tauth = this._getActiveAuthToken(auth);\n\t\treturn this.agent.post({ uri, auth, headers, data, context });\n\t}\n\n\t/**\n\t * Make a PUT request\n\t * @param {object} params\n\t * @param {string} params.uri\t\tThe URI to request\n\t * @param {string|object} [params.auth]\tAuthorization token to use\n\t * @param {object} [params.headers]\tKey/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {string|object} [params.data] Key/VAlue pairs of query params or a correctly formatted string\n\t * @param {object} [params.context]\tThe invocation context, describing the tool and project\n\t * @returns {Promise<RequestResponse, RequestError>} A promise that resolves with either the requested data or an error object\n\t */\n\tput({ uri, auth, headers, data, context }){\n\t\tcontext = this._buildContext(context);\n\t\tauth = this._getActiveAuthToken(auth);\n\t\treturn this.agent.put({ uri, auth, headers, data, context });\n\t}\n\n\t/**\n\t * Make a DELETE request\n\t * @param {object} params\n\t * @param {string} params.uri\t\tThe URI to request\n\t * @param {string|object} [params.auth]\tAuthorization token to use\n\t * @param {object} [params.headers]\tKey/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {string|object} [params.data] Key/VAlue pairs of query params or a correctly formatted string\n\t * @param {object} [params.context]\tThe invocation context, describing the tool and project\n\t * @returns {Promise<RequestResponse, RequestError>} A promise that resolves with either the requested data or an error object\n\t */\n\tdelete({ uri, auth, headers, data, context }){\n\t\tcontext = this._buildContext(context);\n\t\tauth = this._getActiveAuthToken(auth);\n\t\treturn this.agent.delete({ uri, auth, headers, data, context });\n\t}\n\n\t/**\n\t *\n\t * @param {Object} args\t\t\tAn obj with all the possible request configurations\n\t * @param {String} args.uri\t\tThe URI to request\n\t * @param {String} args.method\t\tThe method used to request the URI, should be in uppercase.\n\t * @param {Object} [args.headers]\tKey/Value pairs like `{ 'X-FOO': 'foo', X-BAR: 'bar' }` to send as headers.\n\t * @param {object} [args.data]\t\tArbitrary data to send as the body.\n\t * @param {string|object} [args.auth]\tAuthorization\n\t * @param {String|Object} [args.query]\tQuery parameters\n\t * @param {Object} [args.form]\t\tForm fields\n\t * @param {Object} [args.files]\t\tArray of file names and file content\n\t * @param {Object} [args.context]\tThe invocation context, describing the tool and project.\n\t * @param {boolean} [args.isBuffer]\tIndicate if the response should be treated as Buffer instead of JSON\n\t * @returns {Promise<RequestResponse, RequestError>} A promise that resolves with either the requested data or an error object\n\t */\n\trequest(args){\n\t\targs.context = this._buildContext(args.context);\n\t\targs.auth = this._getActiveAuthToken(args.auth);\n\t\treturn this.agent.request(args);\n\t}\n\n\tclient(options = {}){\n\t\t// @ts-ignore\n\t\treturn new Client(Object.assign({ api: this }, options));\n\t}\n\n\t// Internal method used to target Particle's APIs other than the default\n\tsetBaseUrl(baseUrl){\n\t\tthis.baseUrl = baseUrl;\n\t\tthis.agent.setBaseUrl(baseUrl);\n\t}\n}\n\n// Aliases for backwards compatibility\nParticle.prototype.removeAccessToken = Particle.prototype.deleteAccessToken;\n\nmodule.exports = Particle;\n","module.exports = require(\"buffer\");","module.exports = require(\"builtin-status-codes\");","module.exports = require(\"events\");","module.exports = require(\"form-data\");","module.exports = require(\"inherits\");","module.exports = require(\"node-fetch\");","module.exports = require(\"qs\");","module.exports = require(\"readable-stream\");","module.exports = require(\"url\");","module.exports = require(\"xtend\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(845);\n"],"names":["root","factory","exports","module","define","amd","this","ClientRequest","response","extend","statusCodes","url","http","request","opts","cb","parse","defaultProtocol","g","location","protocol","search","host","hostname","port","path","indexOf","method","toUpperCase","headers","req","on","get","end","IncomingMessage","Agent","defaultMaxSockets","globalAgent","STATUS_CODES","METHODS","xhr","getXHR","undefined","XMLHttpRequest","open","XDomainRequest","e","checkTypeSupport","type","responseType","isFunction","value","fetch","ReadableStream","writableStream","WritableStream","abortController","AbortController","arraybuffer","msstream","mozchunkedarraybuffer","overrideMimeType","capability","inherits","stream","rStates","readyStates","preferBinary","self","Writable","call","_opts","_body","_headers","auth","setHeader","Buffer","from","toString","Object","keys","forEach","name","useFetch","mode","Error","_mode","decideMode","_fetchTimer","_socketTimeout","_socketTimer","_onFinish","prototype","lowerName","toLowerCase","unsafeHeaders","getHeader","header","removeHeader","_destroyed","timeout","setTimeout","headersObj","body","Blob","headersList","keyName","Array","isArray","v","push","signal","controller","_fetchAbortController","requestTimeout","emit","abort","credentials","withCredentials","then","_fetchResponse","_resetTimers","_connect","reason","_xhr","err","process","nextTick","ontimeout","setRequestHeader","_response","onreadystatechange","readyState","LOADING","DONE","_onXHRProgress","onprogress","onerror","send","status","statusValid","bind","_write","chunk","encoding","done","clearTimeout","destroy","data","once","flushHeaders","setNoDelay","setSocketKeepAlive","UNSENT","OPENED","HEADERS_RECEIVED","resetTimers","Readable","rawHeaders","trailers","rawTrailers","statusCode","statusMessage","statusText","key","writable","write","Promise","resolve","reject","_resumeFetch","close","pipeTo","catch","reader","getReader","read","result","_pos","responseURL","getAllResponseHeaders","split","matches","match","_charset","mimeType","charsetMatch","_read","responseText","length","newData","substr","buffer","alloc","i","charCodeAt","Uint8Array","MSStreamReader","byteLength","slice","onload","readAsArrayBuffer","FormData","qs","fs","packageJson","constructor","baseUrl","setBaseUrl","uri","query","context","head","post","put","form","files","isBuffer","requestFiles","_sanitizeFiles","requestParams","_buildRequest","_promiseResponse","makerequest","resp","ok","blob","json","text","objError","JSON","assign","arrayBuffer","isForBrowser","error","shortErrorDescription","errorDescription","error_description","actualUri","queryParams","stringify","hasParams","includes","userAgentHeader","version","repository","contentTypeHeader","_getFromData","_getAuthorizationHeader","_getContextHeaders","window","formData","file","entries","fileData","nodeFormData","_getNodeFormData","append","createReadStream","filepath","_getToolContext","tool","_getProjectContext","project","_toolIdent","components","component","_nameAtVersion","_buildSemicolonSeparatedProperties","obj","primaryProperty","prop","hasOwnProperty","Authorization","encoded","btoa","username","password","k","Library","Particle","api","ready","Boolean","libraries","listLibraries","payload","map","l","library","getLibrary","libraryVersions","getLibraryVersions","contributeLibrary","archive","_throwError","publishLibrary","deleteLibrary","force","errors","errorMessages","message","join","downloadFile","compileCode","platformId","targetVersion","signalDevice","deviceId","listDevices","listBuildTargets","onlyFeatured","targets","target","platform","platforms","prerelease","prereleases","firmware_vendor","trackingIdentity","full","clientSecret","clientId","tokenDuration","https","EventEmitter","token","super","reconnectInterval","buf","idleTimeoutExpired","connect","origin","isSecure","parseInt","connected","connectionTimeout","res","startIdleTimeout","removeAllListeners","emitSafe","event","param","stopIdleTimeout","reconnect","isOffline","navigator","onLine","idleTimeout","pos","discardTrailingNewline","lineLength","fieldLength","c","parseEventStreamLine","eventName","field","step","valueLength","client","defineProperty","_assignAttributes","downloadUrl","links","download","attributes","Defaults","EventStream","Client","options","setDefaultAuth","agent","_isValidContext","setContext","_buildContext","login","grant_type","client_id","client_secret","expires_in","sendOtp","mfaToken","otp","mfa_token","enableMfa","confirmMfa","invalidateTokens","invalidate_tokens","disableMfa","currentPassword","current_password","createCustomer","email","product","loginAsClientOwner","createUser","accountInfo","account_info","verifyUser","resetPassword","deleteAccessToken","delete","access_token","deleteCurrentAccessToken","deleteActiveAccessTokens","deleteUser","listAccessTokens","tracking","deviceName","groups","sortAttr","sortDir","page","perPage","per_page","getDevice","deviceUri","claimDevice","requestTransfer","id","request_transfer","addDeviceToProduct","removeDevice","deny","removeDeviceOwner","renameDevice","updateDevice","setDeviceNotes","notes","markAsDevelopmentDevice","development","lockDeviceProductFirmware","desiredFirmwareVersion","flash","unlockDeviceProductFirmware","signalValue","desired_firmware_version","provisionDevice","productId","product_id","getClaimCode","iccid","validatePromoCode","promoCode","changeProduct","getVariable","flashDevice","build_target_version","latest","flashTinker","console","warning","app","platform_id","downloadFirmwareBinary","binaryId","sendPublicKey","algorithm","deviceID","publicKey","filename","order","Date","now","callFunction","argument","args","getEventStream","org","encodeURIComponent","_getActiveAuthToken","publishEvent","isPrivate","postData","private","createWebhook","device","rejectUnauthorized","noDefaults","hook","requestType","responseTemplate","responseTopic","responseEvent","errorResponseTopic","errorResponseEvent","deleteWebhook","hookId","listWebhooks","createIntegration","settings","deviceid","editIntegration","integrationId","deleteIntegration","listIntegrations","getUserInfo","setUserInfo","changeUsername","changeUserPassword","listSIMs","getSIMDataUsage","getFleetDataUsage","checkSIM","activateSIM","iccids","country","sims","action","deactivateSIM","reactivateSIM","mbLimit","mb_limit","updateSIM","removeSIM","featured","limit","filter","sort","architectures","category","scope","excludeScopes","_asList","visibility","listOAuthClients","createOAuthClient","redirect_uri","updateOAuthClient","deleteOAuthClient","listProducts","getProduct","listProductFirmware","uploadProductFirmware","title","description","getProductFirmware","updateProductFirmware","downloadProductFirmware","releaseProductFirmware","listTeamMembers","inviteTeamMember","removeTeamMember","lookupSerialNumber","serialNumber","createMeshNetwork","device_id","removeMeshNetwork","networkId","listMeshNetworks","getMeshNetwork","updateMeshNetwork","addMeshNetworkDevice","removeMeshNetworkDevice","listMeshNetworkDevices","role","getProductConfiguration","getProductConfigurationSchema","accept","getProductDeviceConfiguration","getProductDeviceConfigurationSchema","setProductConfiguration","config","setProductDeviceConfiguration","getProductLocations","dateRange","rectBl","rectTr","date_range","rect_bl","rect_tr","device_name","getProductDeviceLocations","createLogicBlock","block","getLogicBlock","blockId","updateLogicBlock","deleteLogicBlock","listLogicBlocks","listBlockRuns","getBlockRun","runId","getBlockRunLog","createLedger","ledger","getLedger","ledgerName","updateLedger","archiveLedger","listLedgers","getLedgerInstance","scopeValue","setLedgerInstance","deleteLedgerInstance","listLedgerInstances","_defaultAuth","removeAccessToken","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis","Function","__webpack_exports__"],"sourceRoot":""}